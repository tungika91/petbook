[{"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/index.js":"1","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/App.js":"2","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Layout.js":"3","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Home.js":"4","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/NewPost.js":"5","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/PostPage.js":"6","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/About.js":"7","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Missing.js":"8","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Header.js":"9","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Nav.js":"10","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Footer.js":"11","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Feed.js":"12","/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Post.js":"13","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/index.js":"14","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/App.js":"15","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/context/DataContext.js":"16","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Layout.js":"17","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/EditPet.js":"18","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/About.js":"19","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Home.js":"20","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Register.js":"21","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/RequireAuth.js":"22","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Missing.js":"23","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Login.js":"24","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/PostPage.js":"25","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/NewPet.js":"26","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/api/posts.js":"27","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Nav.js":"28","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Header.js":"29","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/api/axios.js":"30","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Feed.js":"31","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Footer.js":"32","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/ImageUpload.js":"33","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Post.js":"34","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/hooks/useWindowSize.js":"35"},{"size":387,"mtime":1678582440809,"results":"36","hashOfConfig":"37"},{"size":4078,"mtime":1678603965308,"results":"38","hashOfConfig":"37"},{"size":413,"mtime":1678582440804,"results":"39","hashOfConfig":"37"},{"size":469,"mtime":1678589879627,"results":"40","hashOfConfig":"37"},{"size":1012,"mtime":1678592626238,"results":"41","hashOfConfig":"37"},{"size":1274,"mtime":1678590423082,"results":"42","hashOfConfig":"37"},{"size":253,"mtime":1678582440801,"results":"43","hashOfConfig":"37"},{"size":333,"mtime":1678583808814,"results":"44","hashOfConfig":"37"},{"size":159,"mtime":1678582440803,"results":"45","hashOfConfig":"37"},{"size":813,"mtime":1678590061030,"results":"46","hashOfConfig":"37"},{"size":209,"mtime":1678582440803,"results":"47","hashOfConfig":"37"},{"size":223,"mtime":1678582440802,"results":"48","hashOfConfig":"37"},{"size":640,"mtime":1678590192367,"results":"49","hashOfConfig":"37"},{"size":490,"mtime":1681604663100,"results":"50","hashOfConfig":"51"},{"size":1287,"mtime":1684027335402,"results":"52","hashOfConfig":"51"},{"size":7670,"mtime":1683927013040,"results":"53","hashOfConfig":"51"},{"size":426,"mtime":1681996398966,"results":"54","hashOfConfig":"51"},{"size":5023,"mtime":1684051171295,"results":"55","hashOfConfig":"51"},{"size":281,"mtime":1678605264982,"results":"56","hashOfConfig":"51"},{"size":614,"mtime":1683121281935,"results":"57","hashOfConfig":"51"},{"size":3259,"mtime":1683633693447,"results":"58","hashOfConfig":"51"},{"size":422,"mtime":1681608075870,"results":"59","hashOfConfig":"51"},{"size":333,"mtime":1678583808814,"results":"60","hashOfConfig":"51"},{"size":3387,"mtime":1683462721342,"results":"61","hashOfConfig":"51"},{"size":2585,"mtime":1684027278477,"results":"62","hashOfConfig":"51"},{"size":3022,"mtime":1680094258388,"results":"63","hashOfConfig":"51"},{"size":105,"mtime":1681911923892,"results":"64","hashOfConfig":"51"},{"size":935,"mtime":1681565805569,"results":"65","hashOfConfig":"51"},{"size":444,"mtime":1680095930283,"results":"66","hashOfConfig":"51"},{"size":105,"mtime":1681606551802,"results":"67","hashOfConfig":"51"},{"size":245,"mtime":1683926947999,"results":"68","hashOfConfig":"51"},{"size":209,"mtime":1680007404079,"results":"69","hashOfConfig":"51"},{"size":999,"mtime":1683807636680,"results":"70","hashOfConfig":"51"},{"size":700,"mtime":1684026793477,"results":"71","hashOfConfig":"51"},{"size":898,"mtime":1680007930507,"results":"72","hashOfConfig":"51"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"1jreftz",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xkxaup",{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/index.js",[],["147","148"],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/App.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Layout.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Home.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/NewPost.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/PostPage.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/About.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Missing.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Header.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Nav.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Footer.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Feed.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/tutorial/react_router_v6/src/Post.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/index.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/App.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/context/DataContext.js",["149","150"],"import { createContext, useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport api from '../api/posts';\n\nconst DataContext = createContext({});\n\nexport const DataProvider = ({ children }) => {\n    const [pets, setPets] = useState([]); /* default state is an array loaded from local storage or an empty array, in the event the database shoppinglist is deleted */\n    const [search, setSearch] = useState('');\n    const [searchResults, setSearchResults] = useState([]); // array of search results\n    const [picURL, setPicURL] = useState('')\n    const navigate = useNavigate();\n\n    // Inputs for Login\n    const [user, setUser] = useState('');\n    const [pwd, setPwd] = useState('');\n    const [userID, setUserID] = useState('');\n    const [email, setEmail] = useState('');\n    const [auth, setAuth] = useState({})\n\n    // Inputs for Pet in POST\n    const [petName, setPetName] = useState('');\n    const [petType, setPetType] = useState('');\n    const [dob, setDob] = useState('');\n    const [deworm, setDeworm] = useState(format(new Date(), 'M-d-y'));\n    const [gender, setGender] = useState('');\n    const [ster, setSter] = useState('false');\n    const [petDesc, setPetDesc] = useState('');\n\n    // Inputs for Pet in PATCH\n    const [newPetName, setNewPetName] = useState(petName);\n    const [newPetType, setNewPetType] = useState(petType);\n    const [newDob, setNewDob] = useState(dob);\n    const [newDeworm, setNewDeworm] = useState(deworm);\n    const [newGender, setNewGender] = useState(gender);\n    const [newSter, setNewSter] = useState(ster);\n    const [newPetDesc, setNewPetDesc] = useState(petDesc);\n\n    // ------------------- CREATE in CRUD ------------------- //\n    const addPet = async (petName, petType, dob, deworm, gender, ster, petDesc, userID) => {\n        const id = pets.length ? pets[pets.length - 1].id + 1 : 1; // to reference the last post --> posts[posts.length-1]\n        const isSterilised = (ster.toLowerCase()) === 'true';\n        const newPet = {\n            id,\n            pet_name: petName,\n            pet_type: petType,\n            pet_dob: dob,\n            pet_gender: gender,\n            last_deworm: deworm,\n            sterilised: isSterilised,\n            pet_description: petDesc,\n            user_id: userID\n        };\n\n        try {\n            const response = await api.post(`${userID}/pets/register`, newPet, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            })\n            console.log(response.data)\n            const allPets = [...pets, response.data]; // append new post to allPosts\n            setPets(allPets); // set Posts to allPosts\n            setPetName(''); // reset the setPostTitle and setPostBody to empty\n            setPetType('');\n            setDob('');\n            setDeworm(format(new Date(), 'M-d-y'));\n            setGender('');\n            setSter('false');\n            setPetDesc('');\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!petName) return;\n        addPet(petName, petType, dob, deworm, gender, ster, petDesc, userID) // addItem function\n        navigate('/'); // return to home page after submitting post\n    }\n\n    // ------------------- REQUEST in CRUD ------------------- //\n    useEffect(() => {\n        const fetchPets = async () => {\n            try {\n                // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n                const response = await api.get(`${userID}/pets`, {\n                    headers: {\n                        'x-access-token': auth.accessToken\n                    }\n                });\n                setPets(response.data); // response.data is in json format\n                console.log(response.data)\n\n            } catch (err) {\n                if (err.response) { // Not in the 200 response range\n                    console.log(err.response.data);\n                    console.log(err.response.status);\n                    console.log(err.response.headers);\n                } else { console.log(`Error: ${err.message}`) }\n            }\n        }\n        fetchPets();\n    }, [userID, auth]) // [] to show dependency so it won't infinitely request from server\n\n    // ------------------- UPDATE in CRUD ------------------- //\n    const handleEdit = async (id) => {\n        const updatePet = {\n            id,\n            pet_type: newPetType,\n            pet_dob: newDob,\n            pet_gender: newGender,\n            last_deworm: newDeworm,\n            sterilised: (newSter.toLowerCase()) === 'true',\n            pet_description: newPetDesc,\n            pet_name: newPetName\n        };\n        try {\n            const response = await api.patch(`${userID}/pets/${id}`, updatePet, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            console.log(response.data)\n            setPets(pets.map(pet => (pet.id).toString() === id ? { ...response.data } : pet)) // if pet id matches then update\n            setNewPetName('')\n            navigate(`/post/${id}`)\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n    }\n    // ------------------- DELETE in CRUD ------------------- //\n    const handleDelete = async (id) => {\n        try {\n            await api.delete(`${userID}/pets/${id}`, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            const petsList = pets.filter(pet => pet.id !== id); // filter out the posts with post.id not equal to the id of the post we want to delete\n            setPets(petsList); // setPets to the newly filtered postsList\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n        navigate('/');\n    }\n    // ------------------- Send Notification Email (not automated) ------------------- //\n    const API_URL = 'http://127.0.0.1:5000/pets/';\n    const sendEmail = async (id) => {\n        try {\n            const response = api.get(`${API_URL}reminder/${id}/send-email`);\n        } catch (err) {\n            if (err.response) {\n                // Not in the 200 response range\n                console.log(err.response.data);\n                console.log(err.response.status);\n                console.log(err.response.headers);\n            } else { console.log(`Error: ${err.message}`) }\n        }\n        navigate('/');\n    }\n    // ------------------- Filter Search Results on Home page ------------------- //\n    useEffect(() => {\n        const filteredResults = pets.filter((pet) =>\n            ((pet.pet_name).toLowerCase()).includes(search.toLowerCase()));\n        setSearchResults(filteredResults.reverse());\n    }, [pets, search])\n    \n    return (\n        <DataContext.Provider value={{\n            search, setSearch,\n            searchResults, setSearchResults,\n            handleSubmit, petName, setPetName, petType, setPetType, dob, setDob, deworm, setDeworm, gender, setGender, ster, setSter, petDesc, setPetDesc,\n            pets, handleDelete, sendEmail,\n            handleEdit, newPetName, setNewPetName, newPetType, setNewPetType, newDob, setNewDob, newDeworm, setNewDeworm, newGender, setNewGender, newSter, setNewSter, newPetDesc, setNewPetDesc,\n            user, setUser, pwd, setPwd, userID, setUserID, auth, setAuth, picURL, setPicURL, email, setEmail\n        }}>\n            {children}\n        </DataContext.Provider>\n    )\n}\n\nexport default DataContext;","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Layout.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/EditPet.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/About.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Home.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Register.js",["151","152"],"import { useRef, useState, useEffect, useContext } from 'react';\nimport DataContext from './context/DataContext';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\n// import AuthContext from \"./context/AuthProvider\";\n\nimport axios from './api/axios';\nconst REGISTER_URL = '/register';\n\nconst Login = () => {\n    // const { setAuth } = useContext(AuthContext);\n    const userRef = useRef();\n    const errRef = useRef();\n\n    const { user, setUser, email, setEmail, pwd, setPwd } = useContext(DataContext);\n    const [errMsg, setErrMsg] = useState('');\n\n    const navigate = useNavigate();\n    // const location = useLocation();\n    // const from = location.state?.from.pathname || \"/\";\n\n    useEffect(() => {\n        userRef.current.focus();\n    }, [])\n\n    useEffect(() => {\n        setErrMsg('');\n    }, [user, pwd])\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await axios.post(REGISTER_URL,\n                JSON.stringify({ username: user, email: email, password: pwd }),\n                {\n                    headers: { 'Content-Type': 'application/json' },\n                    // withCredentials: true\n                }\n            );\n            console.log(JSON.stringify(response?.data))\n            navigate('/login');\n            setUser('');\n            setPwd('');\n            setEmail('');\n\n        } catch (err) {\n            if (!err?.response) {\n                setErrMsg('No Server Response');\n            } else if (err.response?.status === 400) {\n                setErrMsg('Missing Username or Password');\n            } else if (err.response?.status === 401) {\n                setErrMsg('Wrong Username or Password');\n            } else {\n                setErrMsg('Registration Failed');\n            }\n            errRef.current.focus();\n        }\n    }\n\n    return (\n            <section>\n                <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n                <h1>Sign Up</h1>\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"username\">Username:</label>\n                    <input\n                        type=\"text\"\n                        id=\"username\"\n                        ref={userRef}\n                        autoComplete=\"off\"\n                        onChange={(e) => setUser(e.target.value)}\n                        value={user}\n                        required\n                    />\n\n                    <label htmlFor=\"email\">Email:</label>\n                    <input\n                        type=\"text\"\n                        id=\"email\"\n                        onChange={(e) => setEmail(e.target.value)}\n                        value={email}\n                        required\n                    />\n\n                    <label htmlFor=\"password\">Password:</label>\n                    <input\n                        type=\"password\"\n                        id=\"password\"\n                        onChange={(e) => setPwd(e.target.value)}\n                        value={pwd}\n                        required\n                    />\n                    <button>Register</button>\n                </form>\n\n            </section>\n\n    )\n}\n\nexport default Login","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/RequireAuth.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Missing.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Login.js",["153"],"import { useRef, useState, useEffect, useContext } from 'react';\nimport DataContext from './context/DataContext';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\n// import AuthContext from \"./context/AuthProvider\";\n\nimport axios from './api/axios';\nconst LOGIN_URL = '/login';\n\nconst Login = () => {\n    // const { setAuth } = useContext(AuthContext);\n    const userRef = useRef();\n    const errRef = useRef();\n\n    const { user, setUser, pwd, setPwd, setUserID, setAuth } = useContext(DataContext);\n    const [errMsg, setErrMsg] = useState('');\n\n    const navigate = useNavigate();\n    const location = useLocation();\n    const from = location.state?.from.pathname || \"/\";\n\n    useEffect(() => {\n        userRef.current.focus();\n    }, [])\n\n    useEffect(() => {\n        setErrMsg('');\n    }, [user, pwd])\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await axios.post(LOGIN_URL,\n                JSON.stringify({ username: user, password: pwd }),\n                {\n                    headers: { 'Content-Type': 'application/json' },\n                    // withCredentials: true\n                }\n            );\n            console.log(JSON.stringify(response?.data))\n            const id = response?.data?.id;\n            const accessToken = response?.data?.token;\n            setUserID(id)\n            setAuth({ user, pwd, accessToken })\n            // const roles = response?.data?.roles;\n            // setUser('');\n            // setPwd('');\n            navigate(from, { replace: true });\n\n        } catch (err) {\n            if (!err?.response) {\n                setErrMsg('No Server Response');\n            } else if (err.response?.status === 400) {\n                setErrMsg('Missing Username or Password');\n            } else if (err.response?.status === 401) {\n                setErrMsg('Wrong Username or Password');\n            } else {\n                setErrMsg('Login Failed');\n            }\n            errRef.current.focus();\n        }\n    }\n\n    return (\n            <section>\n                <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n                <h1>Sign In</h1>\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"username\">Username:</label>\n                    <input\n                        type=\"text\"\n                        id=\"username\"\n                        ref={userRef}\n                        autoComplete=\"off\"\n                        onChange={(e) => setUser(e.target.value)}\n                        value={user}\n                        required\n                    />\n\n                    <label htmlFor=\"password\">Password:</label>\n                    <input\n                        type=\"password\"\n                        id=\"password\"\n                        onChange={(e) => setPwd(e.target.value)}\n                        value={pwd}\n                        required\n                    />\n                    <button>Sign In</button>\n                </form>\n                <p>\n                    Need an Account?<br />\n                    <span className=\"line\">\n                        {/*put router link here*/}\n                        <a href=\"register\">Sign Up</a>\n                    </span>\n                </p>\n            </section>\n\n    )\n}\n\nexport default Login","/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/PostPage.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/NewPet.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/api/posts.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Nav.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Header.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/api/axios.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Feed.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Footer.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/ImageUpload.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/Post.js",[],"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/hooks/useWindowSize.js",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":1,"column":46,"nodeType":"160","messageId":"161","endLine":1,"endColumn":52},{"ruleId":"158","severity":1,"message":"162","line":153,"column":19,"nodeType":"160","messageId":"161","endLine":153,"endColumn":27},{"ruleId":"158","severity":1,"message":"163","line":3,"column":10,"nodeType":"160","messageId":"161","endLine":3,"endColumn":14},{"ruleId":"158","severity":1,"message":"164","line":3,"column":29,"nodeType":"160","messageId":"161","endLine":3,"endColumn":40},{"ruleId":"158","severity":1,"message":"163","line":3,"column":10,"nodeType":"160","messageId":"161","endLine":3,"endColumn":14},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'Link' is defined but never used.","'useLocation' is defined but never used.","no-global-assign","no-unsafe-negation"]