{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Link,useParams}from\"react-router-dom\";import{useContext,useEffect}from'react';import DataContext from'../context/DataContext';import api from'../api/axios';import PetMedicalRecord from\"./PetMedicalRecord\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PetMedical=function PetMedical(){var _useContext=useContext(DataContext),pets=_useContext.pets,userID=_useContext.userID,auth=_useContext.auth,medicalRecord=_useContext.medicalRecord,setMedicalRecord=_useContext.setMedicalRecord;var _useParams=useParams(),id=_useParams.id;// id is used in Route\nvar pet=pets.find(function(pet){return pet.id.toString()===id;});// === is for string match, == for numeric\nuseEffect(function(){var getMedicalRecords=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return api.get(\"\".concat(userID,\"/pets/\").concat(pet.id,\"/medical/all\"),{headers:{'x-access-token':auth.accessToken}});case 3:response=_context.sent;response.data.sort(function(a,b){return new Date(b.date)-new Date(a.date);});setMedicalRecord(response.data);// response.data is in json format\n_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);if(_context.t0.response){// Not in the 200 response range\nconsole.log(_context.t0.response.data);console.log(_context.t0.response.status);console.log(_context.t0.response.headers);}else{console.log(\"Error: \".concat(_context.t0.message));}case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function getMedicalRecords(){return _ref.apply(this,arguments);};}();getMedicalRecords();},[pet,userID,auth,setMedicalRecord]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"newRecord\",children:/*#__PURE__*/_jsx(Link,{to:'new',children:/*#__PURE__*/_jsx(\"button\",{children:\" Add Medical Record \"})})}),/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:medicalRecord?medicalRecord.map(function(record){return/*#__PURE__*/_jsx(PetMedicalRecord,{record:record,pet_id:pet.id},record.id);}):\"Missing Record\"})]});};export default PetMedical;","map":{"version":3,"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/medicals/PetMedical.js"],"names":["Link","useParams","useContext","useEffect","DataContext","api","PetMedicalRecord","PetMedical","pets","userID","auth","medicalRecord","setMedicalRecord","id","pet","find","toString","getMedicalRecords","get","headers","accessToken","response","data","sort","a","b","Date","date","console","log","status","message","map","record"],"mappings":"6WAAA,OAASA,IAAT,CAAeC,SAAf,KAAgC,kBAAhC,CACA,OAASC,UAAT,CAAqBC,SAArB,KAAsC,OAAtC,CACA,MAAOC,CAAAA,WAAP,KAAwB,wBAAxB,CACA,MAAOC,CAAAA,GAAP,KAAgB,cAAhB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,C,6IAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACrB,gBAAgEL,UAAU,CAACE,WAAD,CAA1E,CAAQI,IAAR,aAAQA,IAAR,CAAcC,MAAd,aAAcA,MAAd,CAAsBC,IAAtB,aAAsBA,IAAtB,CAA4BC,aAA5B,aAA4BA,aAA5B,CAA2CC,gBAA3C,aAA2CA,gBAA3C,CACA,eAAeX,SAAS,EAAxB,CAAQY,EAAR,YAAQA,EAAR,CAA4B;AAC5B,GAAMC,CAAAA,GAAG,CAAGN,IAAI,CAACO,IAAL,CAAU,SAAAD,GAAG,QAAKA,CAAAA,GAAG,CAACD,EAAL,CAASG,QAAT,KAAwBH,EAA5B,EAAb,CAAZ,CAA0D;AAE1DV,SAAS,CAAC,UAAM,CAChB,GAAMc,CAAAA,iBAAiB,0FAAG,sLAEKZ,CAAAA,GAAG,CAACa,GAAJ,WAAWT,MAAX,kBAA0BK,GAAG,CAACD,EAA9B,iBAAgD,CACnEM,OAAO,CAAE,CACL,iBAAkBT,IAAI,CAACU,WADlB,CAD0D,CAAhD,CAFL,QAEZC,QAFY,eAOlBA,QAAQ,CAACC,IAAT,CAAcC,IAAd,CAAmB,SAACC,CAAD,CAAGC,CAAH,QAAS,IAAIC,CAAAA,IAAJ,CAASD,CAAC,CAACE,IAAX,EAAmB,GAAID,CAAAA,IAAJ,CAASF,CAAC,CAACG,IAAX,CAA5B,EAAnB,EACAf,gBAAgB,CAACS,QAAQ,CAACC,IAAV,CAAhB,CAAiC;AARf,+EAUlB,GAAI,YAAID,QAAR,CAAkB,CAAE;AAChBO,OAAO,CAACC,GAAR,CAAY,YAAIR,QAAJ,CAAaC,IAAzB,EACAM,OAAO,CAACC,GAAR,CAAY,YAAIR,QAAJ,CAAaS,MAAzB,EACAF,OAAO,CAACC,GAAR,CAAY,YAAIR,QAAJ,CAAaF,OAAzB,EACH,CAJD,IAIO,CAAES,OAAO,CAACC,GAAR,kBAAsB,YAAIE,OAA1B,GAAsC,CAd7B,oEAAH,kBAAjBd,CAAAA,iBAAiB,0CAAvB,CAiBAA,iBAAiB,GAChB,CAnBQ,CAmBN,CAACH,GAAD,CAAML,MAAN,CAAcC,IAAd,CAAoBE,gBAApB,CAnBM,CAAT,CAqBA,mBACI,wCACI,YAAK,SAAS,CAAC,WAAf,uBACI,KAAC,IAAD,EAAM,EAAE,CAAE,KAAV,uBACI,wBAAQ,sBAAR,EADJ,EADJ,EADJ,cAMI,YAAK,SAAS,CAAC,WAAf,UACKD,aAAa,CACZA,aAAa,CAACqB,GAAd,CAAkB,SAAAC,MAAM,qBACtB,KAAC,gBAAD,EAAkB,MAAM,CAAEA,MAA1B,CAAkC,MAAM,CAAInB,GAAG,CAACD,EAAhD,EAAyDoB,MAAM,CAACpB,EAAhE,CADsB,EAAxB,CADY,CAGZ,gBAJN,EANJ,GADJ,CAgBH,CA1CD,CA4CA,cAAeN,CAAAA,UAAf","sourcesContent":["import { Link, useParams } from \"react-router-dom\";\nimport { useContext, useEffect } from 'react';\nimport DataContext from '../context/DataContext';\nimport api from '../api/axios';\nimport PetMedicalRecord from \"./PetMedicalRecord\";\n\nconst PetMedical = () => {\n    const { pets, userID, auth, medicalRecord, setMedicalRecord } = useContext(DataContext);\n    const { id } = useParams(); // id is used in Route\n    const pet = pets.find(pet => (pet.id).toString() === id); // === is for string match, == for numeric\n\n    useEffect(() => {\n    const getMedicalRecords = async () => {\n        try {\n            const response = await api.get(`${userID}/pets/${pet.id}/medical/all`, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            response.data.sort((a,b) => new Date(b.date) - new Date(a.date));\n            setMedicalRecord(response.data); // response.data is in json format\n        } catch (err) {\n            if (err.response) { // Not in the 200 response range\n                console.log(err.response.data);\n                console.log(err.response.status);\n                console.log(err.response.headers);\n            } else { console.log(`Error: ${err.message}`) }\n        }\n    }\n    getMedicalRecords();\n    }, [pet, userID, auth, setMedicalRecord])\n\n    return (\n        <>\n            <div className=\"newRecord\">\n                <Link to={'new'}>\n                    <button> Add Medical Record </button>\n                </Link>\n            </div>\n            <div className=\"container\">\n                {medicalRecord \n                ? medicalRecord.map(record => (\n                    <PetMedicalRecord record={record} pet_id = {pet.id} key={record.id} />))\n                : \"Missing Record\"}\n            </div>\n        </>\n        \n    )\n}\n\nexport default PetMedical\n"]},"metadata":{},"sourceType":"module"}