{"ast":null,"code":"var _s = $RefreshSig$();\n\n// CUSTOM HOOKS for Window resize\nimport { useState, useEffect } from 'react'; // define object useWindowSize\n\nconst useWindowSize = () => {\n  _s();\n\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize); //Appends an event listener for events whose type attribute value is type. \n\n    const cleanUp = () => {\n      console.log('run if a useEffect dependency changes');\n      window.removeEventListener(\"resize\", handleResize);\n    };\n\n    return cleanUp; // return cleanUp to remove the eventListener\n  }, []); // run at load time, so no dependency\n\n  return windowSize;\n};\n\n_s(useWindowSize, \"l2wiiN9zSss8kNNP2cz1Zj1IHE0=\");\n\nexport default useWindowSize;","map":{"version":3,"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/hooks/useWindowSize.js"],"names":["useState","useEffect","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","cleanUp","console","log","removeEventListener"],"mappings":";;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CACA;;AACA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC;AACzCK,IAAAA,KAAK,EAAEC,SADkC;AAEzCC,IAAAA,MAAM,EAAED;AAFiC,GAAD,CAA5C;AAKAL,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,YAAY,GAAG,MAAM;AACvBJ,MAAAA,aAAa,CAAC;AACVC,QAAAA,KAAK,EAAEI,MAAM,CAACC,UADJ;AAEVH,QAAAA,MAAM,EAAEE,MAAM,CAACE;AAFL,OAAD,CAAb;AAIH,KALD;;AAOAH,IAAAA,YAAY;AAEZC,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAVY,CAUqC;;AAEjD,UAAMK,OAAO,GAAG,MAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACAN,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC;AACH,KAHD;;AAKA,WAAOK,OAAP,CAjBY,CAiBI;AACnB,GAlBQ,EAkBN,EAlBM,CAAT,CANwB,CAwBjB;;AAEP,SAAOV,UAAP;AACH,CA3BD;;GAAMD,a;;AA6BN,eAAeA,aAAf","sourcesContent":["// CUSTOM HOOKS for Window resize\nimport { useState, useEffect } from 'react';\n// define object useWindowSize\nconst useWindowSize = () => {\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined\n    });\n\n    useEffect(() => {\n        const handleResize = () => {\n            setWindowSize({ \n                width: window.innerWidth,\n                height: window.innerHeight\n            })\n        }\n\n        handleResize();\n        \n        window.addEventListener(\"resize\", handleResize); //Appends an event listener for events whose type attribute value is type. \n\n        const cleanUp = () => {\n            console.log('run if a useEffect dependency changes')\n            window.removeEventListener(\"resize\", handleResize);\n        }\n\n        return cleanUp; // return cleanUp to remove the eventListener\n    }, []) // run at load time, so no dependency\n\n    return windowSize\n}\n\nexport default useWindowSize"]},"metadata":{},"sourceType":"module"}