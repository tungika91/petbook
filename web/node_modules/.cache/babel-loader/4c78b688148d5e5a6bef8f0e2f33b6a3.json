{"ast":null,"code":"var _jsxFileName = \"/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/Post.js\",\n    _s = $RefreshSig$();\n\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = ({\n  pet\n}) => {\n  _s();\n\n  useEffect(() => {\n    const getImages = async id => {\n      try {\n        // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n        const response = await api.get(`${userID}/pets/${id}/upload`, {\n          headers: {\n            'x-access-token': auth.accessToken\n          }\n        });\n        setPicURL(response.data); // response.data is in json format\n      } catch (err) {\n        if (err.response) {\n          // Not in the 200 response range\n          console.log(err.response.data);\n          console.log(err.response.status);\n          console.log(err.response.headers);\n        } else {\n          console.log(`Error: ${err.message}`);\n        }\n      }\n    };\n\n    getImages(pet.id);\n  }, [pet.id]); // [] to show dependency so it won't infinitely request from server\n\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"post\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: `post/${pet.id}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: pet.pet_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"postDate\",\n        children: [\"Pet Type: \", pet.pet_type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"postBody\",\n      children: pet.pet_description.length <= 25 ? pet.pet_description : `${pet.pet_description.slice(0, 25)}...`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Post, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/Post.js"],"names":["Link","Post","pet","useEffect","getImages","id","response","api","get","userID","headers","auth","accessToken","setPicURL","data","err","console","log","status","message","pet_name","pet_type","pet_description","length","slice"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,kBAArB;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAAA;;AAEtBC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMC,SAAS,GAAG,MAAOC,EAAP,IAAc;AAC5B,UAAI;AACA;AACA,cAAMC,QAAQ,GAAG,MAAMC,GAAG,CAACC,GAAJ,CAAS,GAAEC,MAAO,SAAQJ,EAAG,SAA7B,EAAuC;AAC1DK,UAAAA,OAAO,EAAE;AACL,8BAAkBC,IAAI,CAACC;AADlB;AADiD,SAAvC,CAAvB;AAKAC,QAAAA,SAAS,CAACP,QAAQ,CAACQ,IAAV,CAAT,CAPA,CAO0B;AAC7B,OARD,CAQE,OAAOC,GAAP,EAAY;AACV,YAAIA,GAAG,CAACT,QAAR,EAAkB;AAAE;AAChBU,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACT,QAAJ,CAAaQ,IAAzB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACT,QAAJ,CAAaY,MAAzB;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACT,QAAJ,CAAaI,OAAzB;AACH,SAJD,MAIO;AAAEM,UAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,GAAG,CAACI,OAAQ,EAAlC;AAAsC;AAClD;AACJ,KAhBD;;AAiBAf,IAAAA,SAAS,CAACF,GAAG,CAACG,EAAL,CAAT;AACH,GAnBQ,EAmBN,CAACH,GAAG,CAACG,EAAL,CAnBM,CAAT,CAFsB,CAqBT;;AAEb,sBACI;AAAS,IAAA,SAAS,EAAC,MAAnB;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAG,QAAOH,GAAG,CAACG,EAAG,EAAzB;AAAA,8BACI;AAAA,kBAAKH,GAAG,CAACkB;AAAT;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA,mBAAwB,YAAxB,EAAmClB,GAAG,CAACmB,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA,gBACKnB,GAAG,CAACoB,eAAL,CAAsBC,MAAtB,IAAgC,EAAhC,GACMrB,GAAG,CAACoB,eADV,GAEO,GAAGpB,GAAG,CAACoB,eAAL,CAAsBE,KAAtB,CAA4B,CAA5B,EAA+B,EAA/B,CAAmC;AAHhD;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CArCD;;GAAMvB,I;;KAAAA,I;AAuCN,eAAeA,IAAf","sourcesContent":["import { Link } from 'react-router-dom';\n\nconst Post = ({ pet }) => {\n    \n    useEffect(() => {\n        const getImages = async (id) => {\n            try {\n                // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n                const response = await api.get(`${userID}/pets/${id}/upload`, {\n                    headers: {\n                        'x-access-token': auth.accessToken\n                    }\n                });\n                setPicURL(response.data); // response.data is in json format\n            } catch (err) {\n                if (err.response) { // Not in the 200 response range\n                    console.log(err.response.data);\n                    console.log(err.response.status);\n                    console.log(err.response.headers);\n                } else { console.log(`Error: ${err.message}`) }\n            }\n        }\n        getImages(pet.id);\n    }, [pet.id]) // [] to show dependency so it won't infinitely request from server\n\n    return (\n        <article className=\"post\">\n            <Link to={`post/${pet.id}`}>\n                <h2>{pet.pet_name}</h2>\n                <p className=\"postDate\">Pet Type: {pet.pet_type}</p>\n            </Link>\n            <p className=\"postBody\">{\n                (pet.pet_description).length <= 25\n                    ? pet.pet_description\n                    : `${(pet.pet_description).slice(0, 25)}...`\n            }</p>\n            {/* if the post.body length has <= 25 chars > show all, if not, only show the snippet of the first 25 characters */}\n        </article>\n    )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}