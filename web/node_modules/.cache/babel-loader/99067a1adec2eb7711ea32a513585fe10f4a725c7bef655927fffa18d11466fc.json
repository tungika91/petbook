{"ast":null,"code":"var _jsxFileName = \"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/medicals/PetMedical.js\",\n  _s = $RefreshSig$();\nimport { Link, useParams } from \"react-router-dom\";\nimport { useContext, useEffect } from 'react';\nimport DataContext from '../context/DataContext';\nimport api from '../api/axios';\nimport PetMedicalRecord from \"./PetMedicalRecord\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PetMedical = () => {\n  _s();\n  const {\n    pets,\n    userID,\n    auth,\n    medicalRecord,\n    setMedicalRecord\n  } = useContext(DataContext);\n  const {\n    id\n  } = useParams(); // id is used in Route\n  const pet = pets.find(pet => pet.id.toString() === id); // === is for string match, == for numeric\n\n  useEffect(() => {\n    const getMedicalRecords = async () => {\n      try {\n        const response = await api.get(`${userID}/pets/${pet.id}/medical/all`, {\n          headers: {\n            'x-access-token': auth.accessToken\n          }\n        });\n        response.data.sort((a, b) => new Date(b.date) - new Date(a.date));\n        setMedicalRecord(response.data); // response.data is in json format\n      } catch (err) {\n        if (err.response) {\n          // Not in the 200 response range\n          console.log(err.response.data);\n          console.log(err.response.status);\n          console.log(err.response.headers);\n        } else {\n          console.log(`Error: ${err.message}`);\n        }\n      }\n    };\n    getMedicalRecords();\n  }, [pet, userID, auth, setMedicalRecord]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newRecord\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: 'new',\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \" Add Medical Record \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: medicalRecord ? medicalRecord.map(record => /*#__PURE__*/_jsxDEV(PetMedicalRecord, {\n        record: record,\n        pet_id: pet.id\n      }, record.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this)) : \"Missing Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(PetMedical, \"0+ILOp9c3jJaofcd4HLjUBTKugc=\", false, function () {\n  return [useParams];\n});\n_c = PetMedical;\nexport default PetMedical;\nvar _c;\n$RefreshReg$(_c, \"PetMedical\");","map":{"version":3,"names":["Link","useParams","useContext","useEffect","DataContext","api","PetMedicalRecord","React","jsxDEV","_jsxDEV","Fragment","_Fragment","PetMedical","_s","pets","userID","auth","medicalRecord","setMedicalRecord","id","pet","find","toString","getMedicalRecords","response","get","headers","accessToken","data","sort","a","b","Date","date","err","console","log","status","message","children","className","to","fileName","_jsxFileName","lineNumber","columnNumber","map","record","pet_id","_c","$RefreshReg$"],"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/medicals/PetMedical.js"],"sourcesContent":["import { Link, useParams } from \"react-router-dom\";\nimport { useContext, useEffect } from 'react';\nimport DataContext from '../context/DataContext';\nimport api from '../api/axios';\nimport PetMedicalRecord from \"./PetMedicalRecord\";\nimport React from 'react';\n\nconst PetMedical = () => {\n    const { pets, userID, auth, medicalRecord, setMedicalRecord } = useContext(DataContext);\n    const { id } = useParams(); // id is used in Route\n    const pet = pets.find(pet => (pet.id).toString() === id); // === is for string match, == for numeric\n\n    useEffect(() => {\n    const getMedicalRecords = async () => {\n        try {\n            const response = await api.get(`${userID}/pets/${pet.id}/medical/all`, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            response.data.sort((a,b) => new Date(b.date) - new Date(a.date));\n            setMedicalRecord(response.data); // response.data is in json format\n        } catch (err) {\n            if (err.response) { // Not in the 200 response range\n                console.log(err.response.data);\n                console.log(err.response.status);\n                console.log(err.response.headers);\n            } else { console.log(`Error: ${err.message}`) }\n        }\n    }\n    getMedicalRecords();\n    }, [pet, userID, auth, setMedicalRecord])\n\n    return (\n        <>\n            <div className=\"newRecord\">\n                <Link to={'new'}>\n                    <button> Add Medical Record </button>\n                </Link>\n            </div>\n            <div className=\"container\">\n                {medicalRecord \n                ? medicalRecord.map(record => (\n                    <PetMedicalRecord record={record} pet_id = {pet.id} key={record.id} />))\n                : \"Missing Record\"}\n            </div>\n        </>\n        \n    )\n}\n\nexport default PetMedical\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}