{"ast":null,"code":"var _jsxFileName = \"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/medicals/PetMedical.js\",\n    _s = $RefreshSig$();\n\nimport { Link, useParams } from \"react-router-dom\";\nimport { useContext, useEffect } from 'react';\nimport DataContext from '../context/DataContext';\nimport api from '../api/posts';\nimport PetMedicalRecord from \"./PetMedicalRecord\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button1 = styled.button`\n    height: 48px;\n    min-width: 48px;\n    margin-left: 0.5rem;\n    border-radius: 0.25rem;\n    padding: 0.5rem;\n    font-size: 1rem;\n    background-color: #ff5e6c;\n    color: white;\n    cursor: pointer;\n`;\n_c = Button1;\n\nconst PetMedical = () => {\n  _s();\n\n  const {\n    pets,\n    userID,\n    auth,\n    medicalRecord,\n    setMedicalRecord\n  } = useContext(DataContext);\n  const {\n    id\n  } = useParams(); // id is used in Route\n\n  const pet = pets.find(pet => pet.id.toString() === id); // === is for string match, == for numeric\n\n  useEffect(() => {\n    const getMedicalRecords = async () => {\n      try {\n        // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n        const response = await api.get(`${userID}/pets/${pet.id}/medical/all`, {\n          headers: {\n            'x-access-token': auth.accessToken\n          }\n        });\n        setMedicalRecord(response.data); // response.data is in json format\n      } catch (err) {\n        if (err.response) {\n          // Not in the 200 response range\n          console.log(err.response.data);\n          console.log(err.response.status);\n          console.log(err.response.headers);\n        } else {\n          console.log(`Error: ${err.message}`);\n        }\n      }\n    };\n\n    getMedicalRecords();\n  }, [pet.id, auth, userID, setMedicalRecord]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [medicalRecord ? medicalRecord.map(record => /*#__PURE__*/_jsxDEV(PetMedicalRecord, {\n      record: record\n    }, record.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)) : \"Missing Record\", /*#__PURE__*/_jsxDEV(Link, {\n      to: `new`,\n      children: /*#__PURE__*/_jsxDEV(Button1, {\n        children: \"New Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PetMedical, \"0+ILOp9c3jJaofcd4HLjUBTKugc=\", false, function () {\n  return [useParams];\n});\n\n_c2 = PetMedical;\nexport default PetMedical;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Button1\");\n$RefreshReg$(_c2, \"PetMedical\");","map":{"version":3,"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/medicals/PetMedical.js"],"names":["Link","useParams","useContext","useEffect","DataContext","api","PetMedicalRecord","styled","Button1","button","PetMedical","pets","userID","auth","medicalRecord","setMedicalRecord","id","pet","find","toString","getMedicalRecords","response","get","headers","accessToken","data","err","console","log","status","message","map","record"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,MAAMC,OAAO,GAAGD,MAAM,CAACE,MAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;KAAMD,O;;AAYN,MAAME,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA,aAAtB;AAAqCC,IAAAA;AAArC,MAA0Db,UAAU,CAACE,WAAD,CAA1E;AACA,QAAM;AAAEY,IAAAA;AAAF,MAASf,SAAS,EAAxB,CAFqB,CAEO;;AAC5B,QAAMgB,GAAG,GAAGN,IAAI,CAACO,IAAL,CAAUD,GAAG,IAAKA,GAAG,CAACD,EAAL,CAASG,QAAT,OAAwBH,EAAzC,CAAZ,CAHqB,CAGqC;;AAE1Db,EAAAA,SAAS,CAAC,MAAM;AAChB,UAAMiB,iBAAiB,GAAG,YAAY;AAClC,UAAI;AACA;AACA,cAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,GAAJ,CAAS,GAAEV,MAAO,SAAQK,GAAG,CAACD,EAAG,cAAjC,EAAgD;AACnEO,UAAAA,OAAO,EAAE;AACL,8BAAkBV,IAAI,CAACW;AADlB;AAD0D,SAAhD,CAAvB;AAKAT,QAAAA,gBAAgB,CAACM,QAAQ,CAACI,IAAV,CAAhB,CAPA,CAOiC;AAEpC,OATD,CASE,OAAOC,GAAP,EAAY;AACV,YAAIA,GAAG,CAACL,QAAR,EAAkB;AAAE;AAChBM,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,QAAJ,CAAaI,IAAzB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,QAAJ,CAAaQ,MAAzB;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,QAAJ,CAAaE,OAAzB;AACH,SAJD,MAIO;AAAEI,UAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,GAAG,CAACI,OAAQ,EAAlC;AAAsC;AAClD;AACJ,KAjBD;;AAkBAV,IAAAA,iBAAiB;AAChB,GApBQ,EAoBN,CAACH,GAAG,CAACD,EAAL,EAASH,IAAT,EAAeD,MAAf,EAAuBG,gBAAvB,CApBM,CAAT;AAsBA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,eACKD,aAAa,GACZA,aAAa,CAACiB,GAAd,CAAkBC,MAAM,iBACtB,QAAC,gBAAD;AAAkB,MAAA,MAAM,EAAEA;AAA1B,OAAuCA,MAAM,CAAChB,EAA9C;AAAA;AAAA;AAAA;AAAA,YADF,CADY,GAGZ,gBAJN,eAKI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAG,KAAX;AAAA,6BACI,QAAC,OAAD;AAAA,kBAAS;AAAT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAtCD;;GAAMN,U;UAEaT,S;;;MAFbS,U;AAwCN,eAAeA,UAAf","sourcesContent":["import { Link, useParams } from \"react-router-dom\";\nimport { useContext, useEffect } from 'react';\nimport DataContext from '../context/DataContext';\nimport api from '../api/posts';\nimport PetMedicalRecord from \"./PetMedicalRecord\";\nimport styled from \"styled-components\";\n\nconst Button1 = styled.button`\n    height: 48px;\n    min-width: 48px;\n    margin-left: 0.5rem;\n    border-radius: 0.25rem;\n    padding: 0.5rem;\n    font-size: 1rem;\n    background-color: #ff5e6c;\n    color: white;\n    cursor: pointer;\n`;\n\nconst PetMedical = () => {\n    const { pets, userID, auth, medicalRecord, setMedicalRecord } = useContext(DataContext);\n    const { id } = useParams(); // id is used in Route\n    const pet = pets.find(pet => (pet.id).toString() === id); // === is for string match, == for numeric\n\n    useEffect(() => {\n    const getMedicalRecords = async () => {\n        try {\n            // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n            const response = await api.get(`${userID}/pets/${pet.id}/medical/all`, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            setMedicalRecord(response.data); // response.data is in json format\n\n        } catch (err) {\n            if (err.response) { // Not in the 200 response range\n                console.log(err.response.data);\n                console.log(err.response.status);\n                console.log(err.response.headers);\n            } else { console.log(`Error: ${err.message}`) }\n        }\n    }\n    getMedicalRecords();\n    }, [pet.id, auth, userID, setMedicalRecord])\n\n    return (\n        <div className=\"container\">\n            {medicalRecord \n            ? medicalRecord.map(record => (\n                <PetMedicalRecord record={record} key={record.id} />))\n            : \"Missing Record\"}\n            <Link to={`new`}>\n                <Button1>New Record</Button1>\n            </Link>\n        </div>\n    )\n}\n\nexport default PetMedical\n"]},"metadata":{},"sourceType":"module"}