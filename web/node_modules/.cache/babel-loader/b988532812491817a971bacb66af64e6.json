{"ast":null,"code":"var _jsxFileName = \"/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/Post.js\",\n    _s = $RefreshSig$();\n\nimport { Link } from 'react-router-dom';\nimport { useContext, useEffect } from 'react';\nimport DataContext from './context/DataContext';\nimport api from './api/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = ({\n  pet\n}) => {\n  _s();\n\n  const {\n    userID,\n    auth,\n    picURL,\n    setPicURL\n  } = useContext(DataContext);\n\n  const getImages = async id => {\n    try {\n      // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n      const response = await api.get(`${userID}/pets/${id}/upload`, {\n        headers: {\n          'x-access-token': auth.accessToken\n        }\n      });\n      setPicURL(response.data); // response.data is in json format\n    } catch (err) {\n      if (err.response) {\n        // Not in the 200 response range\n        console.log(err.response.data);\n        console.log(err.response.status);\n        console.log(err.response.headers);\n      } else {\n        console.log(`Error: ${err.message}`);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"post\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: `post/${pet.id}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: pet.pet_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"postDate\",\n        children: [\"Pet Type: \", pet.pet_type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"postBody\",\n      children: pet.pet_description.length <= 25 ? pet.pet_description : `${pet.pet_description.slice(0, 25)}...`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: getImages(pet.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Post, \"tFHdsjB00H6zOA4j0/lICwFpCZI=\");\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/Post.js"],"names":["Link","useContext","useEffect","DataContext","api","Post","pet","userID","auth","picURL","setPicURL","getImages","id","response","get","headers","accessToken","data","err","console","log","status","message","pet_name","pet_type","pet_description","length","slice"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAAA;;AACtB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,MAAhB;AAAwBC,IAAAA;AAAxB,MAAsCT,UAAU,CAACE,WAAD,CAAtD;;AACA,QAAMQ,SAAS,GAAG,MAAOC,EAAP,IAAc;AAC5B,QAAI;AACA;AACA,YAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAJ,CAAS,GAAEP,MAAO,SAAQK,EAAG,SAA7B,EAAuC;AAC1DG,QAAAA,OAAO,EAAE;AACL,4BAAkBP,IAAI,CAACQ;AADlB;AADiD,OAAvC,CAAvB;AAKAN,MAAAA,SAAS,CAACG,QAAQ,CAACI,IAAV,CAAT,CAPA,CAO0B;AAC7B,KARD,CAQE,OAAOC,GAAP,EAAY;AACV,UAAIA,GAAG,CAACL,QAAR,EAAkB;AAAE;AAChBM,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,QAAJ,CAAaI,IAAzB;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,QAAJ,CAAaQ,MAAzB;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,QAAJ,CAAaE,OAAzB;AACH,OAJD,MAIO;AAAEI,QAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,GAAG,CAACI,OAAQ,EAAlC;AAAsC;AAClD;AACJ,GAhBD;;AAkBA,sBACI;AAAS,IAAA,SAAS,EAAC,MAAnB;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAG,QAAOhB,GAAG,CAACM,EAAG,EAAzB;AAAA,8BACI;AAAA,kBAAKN,GAAG,CAACiB;AAAT;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA,mBAAwB,YAAxB,EAAmCjB,GAAG,CAACkB,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA,gBACKlB,GAAG,CAACmB,eAAL,CAAsBC,MAAtB,IAAgC,EAAhC,GACMpB,GAAG,CAACmB,eADV,GAEO,GAAGnB,GAAG,CAACmB,eAAL,CAAsBE,KAAtB,CAA4B,CAA5B,EAA+B,EAA/B,CAAmC;AAHhD;AAAA;AAAA;AAAA;AAAA,YALJ,eAYI;AAAA,6BAEI;AAAK,QAAA,GAAG,EAAEhB,SAAS,CAACL,GAAG,CAACM,EAAL;AAAnB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CA1CD;;GAAMP,I;;KAAAA,I;AA4CN,eAAeA,IAAf","sourcesContent":["import { Link } from 'react-router-dom';\nimport { useContext, useEffect } from 'react';\nimport DataContext from './context/DataContext';\nimport api from './api/posts';\n\nconst Post = ({ pet }) => {\n    const { userID, auth, picURL, setPicURL } = useContext(DataContext);\n    const getImages = async (id) => {\n        try {\n            // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n            const response = await api.get(`${userID}/pets/${id}/upload`, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            setPicURL(response.data); // response.data is in json format\n        } catch (err) {\n            if (err.response) { // Not in the 200 response range\n                console.log(err.response.data);\n                console.log(err.response.status);\n                console.log(err.response.headers);\n            } else { console.log(`Error: ${err.message}`) }\n        }\n    }\n\n    return (\n        <article className=\"post\">\n            <Link to={`post/${pet.id}`}>\n                <h2>{pet.pet_name}</h2>\n                <p className=\"postDate\">Pet Type: {pet.pet_type}</p>\n            </Link>\n            <p className=\"postBody\">{\n                (pet.pet_description).length <= 25\n                    ? pet.pet_description\n                    : `${(pet.pet_description).slice(0, 25)}...`\n            }</p>\n            {/* if the post.body length has <= 25 chars > show all, if not, only show the snippet of the first 25 characters */}\n\n            <div>\n                {/* Placeholder for image */}\n                <img src={getImages(pet.id)} />\n            </div>\n\n        </article>\n\n        \n    )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}