{"ast":null,"code":"var _jsxFileName = \"/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Layout from './Layout';\nimport Home from './Home';\nimport NewPet from './NewPet';\nimport PostPage from './PostPage';\nimport About from './About';\nimport Missing from './Missing';\nimport { Route, Routes, useNavigate } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport apiRequest from './apiRequest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const API_URL = 'http://127.0.0.1:5000/pets/';\n  const [pets, setPets] = useState([]);\n  /* default state is an array loaded from local storage or an empty array, in the event the database shoppinglist is deleted */\n\n  const [search, setSearch] = useState('');\n  const [fetchError, setFetchError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchResults, setSearchResults] = useState([]); // array of search results\n\n  const navigate = useNavigate(); // Inputs for Pet in POST\n\n  const [petName, setPetName] = useState('');\n  const [petType, setPetType] = useState('');\n  const [dob, setDob] = useState('');\n  const [dewormDate, setDewormDate] = useState(format(new Date(), 'M-d-y'));\n  const [gender, setGender] = useState('');\n  const [sterilised, setSterilised] = useState(false);\n  const [petDesc, setPetDesc] = useState('');\n\n  const addPet = async (petName, petType, dob, dewormDate, gender, sterilised, petDesc) => {\n    const id = pets.length ? pets[pets.length - 1].id + 1 : 1; // to reference the last post --> posts[posts.length-1]\n    // const datetime = format(new Date(), 'M-d-y'); // pp for time\n\n    var isTrue = sterilised.toLowerCase() === 'true';\n    const newPet = {\n      id,\n      user_id: 3,\n      pet_name: petName,\n      pet_type: petType,\n      pet_dob: dob,\n      pet_description: petDesc,\n      pet_gender: gender,\n      last_deworm: dewormDate,\n      sterilised: JSON.parse(isTrue)\n    };\n    const allPets = [...pets, newPet]; // append new post to allPosts\n\n    setPets(allPets); // set Posts to allPosts\n\n    /* CREATE in CRUD*/\n\n    const postOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newPet)\n    };\n    const result = await apiRequest(`${API_URL}register`, postOptions);\n    if (result) setFetchError(result);\n  };\n  /* REQUEST in CRUD - used in useEffect */\n\n\n  async function fetchPets() {\n    try {\n      const response = await fetch(API_URL, {\n        method: \"GET\"\n      });\n      if (!response.ok) throw Error('Did not receive expected data');\n      const listPets = await response.json();\n      setPets(listPets);\n      setFetchError(null);\n    } catch (err) {\n      setFetchError(err.message);\n    } finally {\n      setIsLoading(false);\n      /* tracking the state of IsLoading */\n    }\n  }\n\n  useEffect(() => {\n    fetchPets();\n    setTimeout(() => {\n      (async () => await fetchPets())();\n    }, 2000);\n  }, []); // [] to show dependency so it won't infinitely request from server\n\n  useEffect(() => {\n    const filteredResults = pets.filter(pet => pet.pet_name.toLowerCase().includes(search.toLowerCase()));\n    setSearchResults(filteredResults.reverse());\n  }, [pets, search]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!petName) return;\n    addPet(petName, petType, dob, gender, sterilised, petDesc); // addItem function\n\n    setPetName(''); // reset the setPostTitle and setPostBody to empty\n\n    setPetType('');\n    setDob('');\n    setGender('');\n    setSterilised(false);\n    setPetDesc('');\n    navigate('/'); // return to home page after submitting post\n  };\n\n  const handleDelete = async id => {\n    // filter out the posts with post.id not equal to the id of the post we want to delete\n    const petsList = pets.filter(pet => pet.id !== id);\n    setPets(petsList); // set the Posts to the newly filtered postsList\n\n    /* DELETE in CRUD */\n\n    const deleteOptions = {\n      method: 'DELETE'\n    };\n    const reqUrl = `${API_URL}${id}`;\n    /* Access the specific item */\n\n    const result = await apiRequest(reqUrl, deleteOptions);\n    if (result) setFetchError(result);\n    navigate('/');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(Layout, {\n        search: search,\n        setSearch: setSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 32\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(Home, {\n          pets: searchResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 31\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          index: true,\n          element: /*#__PURE__*/_jsxDEV(NewPet, {\n            handleSubmit: handleSubmit,\n            petName: petName,\n            setPetName: setPetName,\n            petType: petType,\n            setPetType: setPetType,\n            dob: dob,\n            setDob: setDob,\n            dewormDate: dewormDate,\n            setDewormDate: setDewormDate,\n            gender: gender,\n            setGender: setGender,\n            sterilised: sterilised,\n            setSterilised: setSterilised,\n            petDesc: petDesc,\n            setPetDesc: setPetDesc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \":id\",\n          element: /*#__PURE__*/_jsxDEV(PostPage, {\n            pets: pets,\n            handleDelete: handleDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"about\",\n        element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Missing, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"N+48jAiOyATYnnqrmSDnyB7L0tk=\", false, function () {\n  return [useNavigate];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/App.js"],"names":["Layout","Home","NewPet","PostPage","About","Missing","Route","Routes","useNavigate","useState","useEffect","format","apiRequest","App","API_URL","pets","setPets","search","setSearch","fetchError","setFetchError","isLoading","setIsLoading","searchResults","setSearchResults","navigate","petName","setPetName","petType","setPetType","dob","setDob","dewormDate","setDewormDate","Date","gender","setGender","sterilised","setSterilised","petDesc","setPetDesc","addPet","id","length","isTrue","toLowerCase","newPet","user_id","pet_name","pet_type","pet_dob","pet_description","pet_gender","last_deworm","JSON","parse","allPets","postOptions","method","headers","body","stringify","result","fetchPets","response","fetch","ok","Error","listPets","json","err","message","setTimeout","filteredResults","filter","pet","includes","reverse","handleSubmit","e","preventDefault","handleDelete","petsList","deleteOptions","reqUrl"],"mappings":"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","sourcesContent":["import Layout from './Layout';\nimport Home from './Home';\nimport NewPet from './NewPet';\nimport PostPage from './PostPage';\nimport About from './About';\nimport Missing from './Missing';\nimport { Route, Routes, useNavigate } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport apiRequest from './apiRequest';\n\nfunction App() {\n  const API_URL = 'http://127.0.0.1:5000/pets/';\n  const [pets, setPets] = useState([]); /* default state is an array loaded from local storage or an empty array, in the event the database shoppinglist is deleted */\n  const [search, setSearch] = useState('');\n  const [fetchError, setFetchError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchResults, setSearchResults] = useState([]); // array of search results\n  const navigate = useNavigate();\n\n  // Inputs for Pet in POST\n  const [petName, setPetName] = useState('');\n  const [petType, setPetType] = useState('');\n  const [dob, setDob] = useState('');\n  const [dewormDate, setDewormDate] = useState(format(new Date(), 'M-d-y'));\n  const [gender, setGender] = useState('');\n  const [sterilised, setSterilised] = useState(false);\n  const [petDesc, setPetDesc] = useState('');\n\n  const addPet = async (petName, petType, dob, dewormDate, gender, sterilised, petDesc) => {\n    const id = pets.length ? pets[pets.length - 1].id + 1 : 1; // to reference the last post --> posts[posts.length-1]\n    // const datetime = format(new Date(), 'M-d-y'); // pp for time\n    var isTrue = (sterilised.toLowerCase() === 'true');\n    const newPet = { \n      id, \n      user_id: 3,\n      pet_name: petName, \n      pet_type: petType,\n      pet_dob: dob,\n      pet_description: petDesc,\n      pet_gender: gender,\n      last_deworm: dewormDate,\n      sterilised: JSON.parse(isTrue)};\n    const allPets = [...pets, newPet]; // append new post to allPosts\n    setPets(allPets); // set Posts to allPosts\n\n    /* CREATE in CRUD*/\n    const postOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newPet)\n    }\n    const result = await apiRequest(`${API_URL}register`, postOptions)\n    if (result) setFetchError(result);\n  }\n  /* REQUEST in CRUD - used in useEffect */\n  async function fetchPets(){\n    try {\n      const response = await fetch(API_URL, {method: \"GET\"});\n      if (!response.ok) throw Error('Did not receive expected data');\n      const listPets = await response.json();\n      setPets(listPets);\n      setFetchError(null);\n    } catch (err) {\n      setFetchError(err.message);\n    } finally {\n      setIsLoading(false); /* tracking the state of IsLoading */\n    }\n  }\n\n  useEffect(() => {\n    fetchPets();\n    setTimeout(() => {\n      (async () => await fetchPets())();\n    }, 2000);\n  }, []) // [] to show dependency so it won't infinitely request from server\n\n  useEffect(() => {\n    const filteredResults = pets.filter((pet) =>\n    ((pet.pet_name).toLowerCase()).includes(search.toLowerCase()));\n    \n    setSearchResults(filteredResults.reverse());\n  }, [pets, search]) \n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!petName) return;\n    addPet(petName, petType, dob, gender, sterilised, petDesc) // addItem function\n    setPetName(''); // reset the setPostTitle and setPostBody to empty\n    setPetType('');\n    setDob('');\n    setGender('');\n    setSterilised(false);\n    setPetDesc('');\n    navigate('/'); // return to home page after submitting post\n  }\n\n  const handleDelete = async (id) => {\n    // filter out the posts with post.id not equal to the id of the post we want to delete\n    const petsList = pets.filter(pet => pet.id !== id);\n    setPets(petsList); // set the Posts to the newly filtered postsList\n    \n    /* DELETE in CRUD */\n    const deleteOptions = {method: 'DELETE'}\n    const reqUrl = `${API_URL}${id}` /* Access the specific item */\n    const result = await apiRequest(reqUrl, deleteOptions)\n    if (result) setFetchError(result);\n    \n    navigate('/');\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Layout\n        search={search}\n        setSearch={setSearch}\n      />}>\n        <Route index element={<Home pets={searchResults} />} />\n        <Route path=\"post\">\n          <Route index element={<NewPet\n            handleSubmit={handleSubmit}\n            petName={petName} setPetName={setPetName}\n            petType={petType} setPetType={setPetType}\n            dob={dob} setDob={setDob}\n            dewormDate={dewormDate} setDewormDate={setDewormDate}\n            gender={gender} setGender={setGender}\n            sterilised={sterilised} setSterilised={setSterilised}\n            petDesc={petDesc} setPetDesc={setPetDesc}\n          />} />\n          <Route path=\":id\" element={<PostPage\n            pets={pets}\n            handleDelete={handleDelete}\n          />} />\n        </Route>\n        <Route path=\"about\" element={<About />} />\n        <Route path=\"*\" element={<Missing />} />\n      </Route>\n    </Routes>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}