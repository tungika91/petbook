{"ast":null,"code":"var _jsxFileName = \"/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/context/DataContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport api from '../api/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext({});\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n\n  const [pets, setPets] = useState([]);\n  /* default state is an array loaded from local storage or an empty array, in the event the database shoppinglist is deleted */\n\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState([]); // array of search results\n\n  const [pic, setPic] = useState('');\n  const navigate = useNavigate(); // Inputs for Login\n\n  const [user, setUser] = useState('');\n  const [pwd, setPwd] = useState('');\n  const [email, setEmail] = useState('');\n  const [userID, setUserID] = useState('');\n  const [auth, setAuth] = useState({}); // Inputs for Pet in POST\n\n  const [petName, setPetName] = useState('');\n  const [petType, setPetType] = useState('');\n  const [dob, setDob] = useState('');\n  const [deworm, setDeworm] = useState(format(new Date(), 'M-d-y'));\n  const [gender, setGender] = useState('');\n  const [ster, setSter] = useState('false');\n  const [petDesc, setPetDesc] = useState(''); // Inputs for Pet in PATCH\n\n  const [newPetName, setNewPetName] = useState(petName);\n  const [newPetType, setNewPetType] = useState(petType);\n  const [newDob, setNewDob] = useState(dob);\n  const [newDeworm, setNewDeworm] = useState(deworm);\n  const [newGender, setNewGender] = useState(gender);\n  const [newSter, setNewSter] = useState(ster);\n  const [newPetDesc, setNewPetDesc] = useState(petDesc); // ------------------- CREATE in CRUD ------------------- //\n\n  const addPet = async (petName, petType, dob, deworm, gender, ster, petDesc, userID) => {\n    const id = pets.length ? pets[pets.length - 1].id + 1 : 1; // to reference the last post --> posts[posts.length-1]\n\n    const isSterilised = ster.toLowerCase() === 'true';\n    const newPet = {\n      id,\n      pet_name: petName,\n      pet_type: petType,\n      pet_dob: dob,\n      pet_gender: gender,\n      last_deworm: deworm,\n      sterilised: isSterilised,\n      pet_description: petDesc,\n      user_id: userID\n    };\n\n    try {\n      const response = await api.post(`${userID}/pets/register`, newPet, {\n        headers: {\n          'x-access-token': auth.accessToken\n        }\n      });\n      console.log(response.data);\n      const allPets = [...pets, response.data]; // append new post to allPosts\n\n      setPets(allPets); // set Posts to allPosts\n\n      setPetName(''); // reset the setPostTitle and setPostBody to empty\n\n      setPetType('');\n      setDob('');\n      setDeworm(format(new Date(), 'M-d-y'));\n      setGender('');\n      setSter('false');\n      setPetDesc('');\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!petName) return;\n    addPet(petName, petType, dob, deworm, gender, ster, petDesc, userID); // addItem function\n\n    navigate('/'); // return to home page after submitting post\n  }; // ------------------- REQUEST in CRUD ------------------- //\n\n\n  useEffect(() => {\n    const fetchPets = async () => {\n      try {\n        // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n        const response = await api.get(`${userID}/pets`, {\n          headers: {\n            'x-access-token': auth.accessToken\n          }\n        });\n        setPets(response.data); // response.data is in json format\n      } catch (err) {\n        if (err.response) {\n          // Not in the 200 response range\n          console.log(err.response.data);\n          console.log(err.response.status);\n          console.log(err.response.headers);\n        } else {\n          console.log(`Error: ${err.message}`);\n        }\n      }\n    };\n\n    fetchPets();\n  }, [userID, auth]); // [] to show dependency so it won't infinitely request from server\n  // ------------------- UPDATE in CRUD ------------------- //\n\n  const handleEdit = async id => {\n    const updatePet = {\n      id,\n      pet_type: newPetType,\n      pet_dob: newDob,\n      pet_gender: newGender,\n      last_deworm: newDeworm,\n      sterilised: newSter.toLowerCase() === 'true',\n      pet_description: newPetDesc,\n      pet_name: newPetName\n    };\n\n    try {\n      const response = await api.patch(`${userID}/pets/${id}`, updatePet, {\n        headers: {\n          'x-access-token': auth.accessToken\n        }\n      });\n      console.log(response.data);\n      setPets(pets.map(pet => pet.id.toString() === id ? { ...response.data\n      } : pet)); // if pet id matches then update\n\n      setNewPetName('');\n      navigate(`/post/${id}`);\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  }; // ------------------- DELETE in CRUD ------------------- //\n\n\n  const handleDelete = async id => {\n    try {\n      await api.delete(`${userID}/pets/${id}`, {\n        headers: {\n          'x-access-token': auth.accessToken\n        }\n      });\n      const petsList = pets.filter(pet => pet.id !== id); // filter out the posts with post.id not equal to the id of the post we want to delete\n\n      setPets(petsList); // setPets to the newly filtered postsList\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n\n    navigate('/');\n  }; // ------------------- Send Notification Email (not automated) ------------------- //\n\n\n  const API_URL = 'http://127.0.0.1:5000/pets/';\n\n  const sendEmail = async id => {\n    try {\n      const response = api.get(`${API_URL}reminder/${id}/send-email`);\n    } catch (err) {\n      if (err.response) {\n        // Not in the 200 response range\n        console.log(err.response.data);\n        console.log(err.response.status);\n        console.log(err.response.headers);\n      } else {\n        console.log(`Error: ${err.message}`);\n      }\n    }\n\n    navigate('/');\n  }; // ------------------- Filter Search Results on Home page ------------------- //\n\n\n  useEffect(() => {\n    const filteredResults = pets.filter(pet => pet.pet_name.toLowerCase().includes(search.toLowerCase()));\n    setSearchResults(filteredResults.reverse());\n  }, [pets, search]); // ------------------- Get Image ------------------- //\n\n  useEffect(() => {\n    const getImages = async () => {\n      try {\n        // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n        const response = await api.get(`${userID}/pets/1/upload`, {\n          headers: {\n            'x-access-token': auth.accessToken\n          }\n        });\n        console.log(response.data);\n        setPic(response.image); // response.data is in json format\n      } catch (err) {\n        if (err.response) {\n          // Not in the 200 response range\n          console.log(err.response.data);\n          console.log(err.response.status);\n          console.log(err.response.headers);\n        } else {\n          console.log(`Error: ${err.message}`);\n        }\n      }\n    };\n\n    getImages();\n  }, []); // [] to show dependency so it won't infinitely request from server\n\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      search,\n      setSearch,\n      searchResults,\n      setSearchResults,\n      handleSubmit,\n      petName,\n      setPetName,\n      petType,\n      setPetType,\n      dob,\n      setDob,\n      deworm,\n      setDeworm,\n      gender,\n      setGender,\n      ster,\n      setSter,\n      petDesc,\n      setPetDesc,\n      pets,\n      handleDelete,\n      sendEmail,\n      handleEdit,\n      newPetName,\n      setNewPetName,\n      newPetType,\n      setNewPetType,\n      newDob,\n      setNewDob,\n      newDeworm,\n      setNewDeworm,\n      newGender,\n      setNewGender,\n      newSter,\n      setNewSter,\n      newPetDesc,\n      setNewPetDesc,\n      user,\n      setUser,\n      email,\n      setEmail,\n      pwd,\n      setPwd,\n      userID,\n      setUserID,\n      auth,\n      setAuth,\n      pic,\n      setPic\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DataProvider, \"E6UG1GRtWf54x9Zqoa3Mu6PlE2E=\", false, function () {\n  return [useNavigate];\n});\n\n_c = DataProvider;\nexport default DataContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/context/DataContext.js"],"names":["createContext","useState","useEffect","useRef","useNavigate","format","api","DataContext","DataProvider","children","pets","setPets","search","setSearch","searchResults","setSearchResults","pic","setPic","navigate","user","setUser","pwd","setPwd","email","setEmail","userID","setUserID","auth","setAuth","petName","setPetName","petType","setPetType","dob","setDob","deworm","setDeworm","Date","gender","setGender","ster","setSter","petDesc","setPetDesc","newPetName","setNewPetName","newPetType","setNewPetType","newDob","setNewDob","newDeworm","setNewDeworm","newGender","setNewGender","newSter","setNewSter","newPetDesc","setNewPetDesc","addPet","id","length","isSterilised","toLowerCase","newPet","pet_name","pet_type","pet_dob","pet_gender","last_deworm","sterilised","pet_description","user_id","response","post","headers","accessToken","console","log","data","allPets","err","message","handleSubmit","e","preventDefault","fetchPets","get","status","handleEdit","updatePet","patch","map","pet","toString","handleDelete","delete","petsList","filter","API_URL","sendEmail","filteredResults","includes","reverse","getImages","image"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport api from '../api/posts';\n\nconst DataContext = createContext({});\n\nexport const DataProvider = ({ children }) => {\n    const [pets, setPets] = useState([]); /* default state is an array loaded from local storage or an empty array, in the event the database shoppinglist is deleted */\n    const [search, setSearch] = useState('');\n    const [searchResults, setSearchResults] = useState([]); // array of search results\n    const [pic, setPic] = useState('')\n    const navigate = useNavigate();\n\n    // Inputs for Login\n    const [user, setUser] = useState('');\n    const [pwd, setPwd] = useState('');\n    const [email, setEmail] = useState('');\n    const [userID, setUserID] = useState('');\n    const [auth, setAuth] = useState({})\n\n    // Inputs for Pet in POST\n    const [petName, setPetName] = useState('');\n    const [petType, setPetType] = useState('');\n    const [dob, setDob] = useState('');\n    const [deworm, setDeworm] = useState(format(new Date(), 'M-d-y'));\n    const [gender, setGender] = useState('');\n    const [ster, setSter] = useState('false');\n    const [petDesc, setPetDesc] = useState('');\n\n    // Inputs for Pet in PATCH\n    const [newPetName, setNewPetName] = useState(petName);\n    const [newPetType, setNewPetType] = useState(petType);\n    const [newDob, setNewDob] = useState(dob);\n    const [newDeworm, setNewDeworm] = useState(deworm);\n    const [newGender, setNewGender] = useState(gender);\n    const [newSter, setNewSter] = useState(ster);\n    const [newPetDesc, setNewPetDesc] = useState(petDesc);\n\n    // ------------------- CREATE in CRUD ------------------- //\n    const addPet = async (petName, petType, dob, deworm, gender, ster, petDesc, userID) => {\n        const id = pets.length ? pets[pets.length - 1].id + 1 : 1; // to reference the last post --> posts[posts.length-1]\n        const isSterilised = (ster.toLowerCase()) === 'true';\n        const newPet = {\n            id,\n            pet_name: petName,\n            pet_type: petType,\n            pet_dob: dob,\n            pet_gender: gender,\n            last_deworm: deworm,\n            sterilised: isSterilised,\n            pet_description: petDesc,\n            user_id: userID\n        };\n\n        try {\n            const response = await api.post(`${userID}/pets/register`, newPet, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            })\n            console.log(response.data)\n            const allPets = [...pets, response.data]; // append new post to allPosts\n            setPets(allPets); // set Posts to allPosts\n            setPetName(''); // reset the setPostTitle and setPostBody to empty\n            setPetType('');\n            setDob('');\n            setDeworm(format(new Date(), 'M-d-y'));\n            setGender('');\n            setSter('false');\n            setPetDesc('');\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!petName) return;\n        addPet(petName, petType, dob, deworm, gender, ster, petDesc, userID) // addItem function\n        navigate('/'); // return to home page after submitting post\n    }\n\n    // ------------------- REQUEST in CRUD ------------------- //\n    useEffect(() => {\n        const fetchPets = async () => {\n            try {\n                // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n                const response = await api.get(`${userID}/pets`, {\n                    headers: {\n                        'x-access-token': auth.accessToken\n                    }\n                });\n                setPets(response.data); // response.data is in json format\n            } catch (err) {\n                if (err.response) { // Not in the 200 response range\n                    console.log(err.response.data);\n                    console.log(err.response.status);\n                    console.log(err.response.headers);\n                } else { console.log(`Error: ${err.message}`) }\n            }\n        }\n        fetchPets();\n    }, [userID, auth]) // [] to show dependency so it won't infinitely request from server\n\n    // ------------------- UPDATE in CRUD ------------------- //\n    const handleEdit = async (id) => {\n        const updatePet = {\n            id,\n            pet_type: newPetType,\n            pet_dob: newDob,\n            pet_gender: newGender,\n            last_deworm: newDeworm,\n            sterilised: (newSter.toLowerCase()) === 'true',\n            pet_description: newPetDesc,\n            pet_name: newPetName\n        };\n        try {\n            const response = await api.patch(`${userID}/pets/${id}`, updatePet, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            console.log(response.data)\n            setPets(pets.map(pet => (pet.id).toString() === id ? { ...response.data } : pet)) // if pet id matches then update\n            setNewPetName('')\n            navigate(`/post/${id}`)\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n    }\n    // ------------------- DELETE in CRUD ------------------- //\n    const handleDelete = async (id) => {\n        try {\n            await api.delete(`${userID}/pets/${id}`, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            const petsList = pets.filter(pet => pet.id !== id); // filter out the posts with post.id not equal to the id of the post we want to delete\n            setPets(petsList); // setPets to the newly filtered postsList\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n        navigate('/');\n    }\n    // ------------------- Send Notification Email (not automated) ------------------- //\n    const API_URL = 'http://127.0.0.1:5000/pets/';\n    const sendEmail = async (id) => {\n        try {\n            const response = api.get(`${API_URL}reminder/${id}/send-email`);\n        } catch (err) {\n            if (err.response) {\n                // Not in the 200 response range\n                console.log(err.response.data);\n                console.log(err.response.status);\n                console.log(err.response.headers);\n            } else { console.log(`Error: ${err.message}`) }\n        }\n        navigate('/');\n    }\n    // ------------------- Filter Search Results on Home page ------------------- //\n    useEffect(() => {\n        const filteredResults = pets.filter((pet) =>\n            ((pet.pet_name).toLowerCase()).includes(search.toLowerCase()));\n        setSearchResults(filteredResults.reverse());\n    }, [pets, search])\n    \n    // ------------------- Get Image ------------------- //\n    useEffect(() => {\n        const getImages = async () => {\n            try {\n                // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n                const response = await api.get(`${userID}/pets/1/upload`, {\n                    headers: {\n                        'x-access-token': auth.accessToken\n                    }\n                });\n                console.log(response.data)\n                setPic(response.image); // response.data is in json format\n            } catch (err) {\n                if (err.response) { // Not in the 200 response range\n                    console.log(err.response.data);\n                    console.log(err.response.status);\n                    console.log(err.response.headers);\n                } else { console.log(`Error: ${err.message}`) }\n            }\n        }\n        getImages();\n    }, []) // [] to show dependency so it won't infinitely request from server\n    return (\n        <DataContext.Provider value={{\n            search, setSearch,\n            searchResults, setSearchResults,\n            handleSubmit, petName, setPetName, petType, setPetType, dob, setDob, deworm, setDeworm, gender, setGender, ster, setSter, petDesc, setPetDesc,\n            pets, handleDelete, sendEmail,\n            handleEdit, newPetName, setNewPetName, newPetType, setNewPetType, newDob, setNewDob, newDeworm, setNewDeworm, newGender, setNewGender, newSter, setNewSter, newPetDesc, setNewPetDesc,\n            user, setUser, email, setEmail, pwd, setPwd, userID, setUserID, auth, setAuth, pic, setPic\n        }}>\n            {children}\n        </DataContext.Provider>\n    )\n}\n\nexport default DataContext;"]},"metadata":{},"sourceType":"module"}