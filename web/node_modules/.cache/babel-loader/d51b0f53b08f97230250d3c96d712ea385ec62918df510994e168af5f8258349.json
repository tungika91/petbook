{"ast":null,"code":"var _jsxFileName = \"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/context/DataContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport api from '../api/axios';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext({});\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [pets, setPets] = useState([]); /* default state is an array loaded from local storage or an empty array, in the event the database shoppinglist is deleted */\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState([]); // array of search results\n  const [picURL, setPicURL] = useState('');\n  const navigate = useNavigate();\n\n  // Inputs for Login\n  const [user, setUser] = useState('');\n  const [pwd, setPwd] = useState('');\n  const [userID, setUserID] = useState('');\n  const [auth, setAuth] = useState({});\n  const [email, setEmail] = useState('');\n\n  // Inputs for Pet in POST\n  const [petName, setPetName] = useState('');\n  const [petType, setPetType] = useState('');\n  const [dob, setDob] = useState('');\n  // const [deworm, setDeworm] = useState(format(new Date(), 'M-d-y'));\n  const [deworm, setDeworm] = useState(new Date());\n  const [gender, setGender] = useState('');\n  const [ster, setSter] = useState('false');\n  const [petDesc, setPetDesc] = useState('');\n\n  // Inputs for Pet in PATCH\n  const [newPetName, setNewPetName] = useState(petName);\n  const [newPetType, setNewPetType] = useState(petType);\n  const [newDob, setNewDob] = useState(dob);\n  const [newDeworm, setNewDeworm] = useState(deworm);\n  const [newGender, setNewGender] = useState(gender);\n  const [newSter, setNewSter] = useState(ster);\n  const [newPetDesc, setNewPetDesc] = useState(petDesc);\n\n  // Inputs for Pet Medical\n  const [medicalRecord, setMedicalRecord] = useState();\n\n  // ------------------- CREATE in CRUD ------------------- //\n  const addPet = async (petName, petType, dob, deworm, gender, ster, petDesc, userID) => {\n    const id = pets.length ? pets[pets.length - 1].id + 1 : 1; // to reference the last post --> posts[posts.length-1]\n    const isSterilised = ster.toLowerCase() === 'true';\n    const newPet = {\n      id,\n      pet_name: petName,\n      pet_type: petType,\n      pet_dob: dob,\n      pet_gender: gender,\n      last_deworm: deworm,\n      sterilised: isSterilised,\n      pet_description: petDesc,\n      user_id: userID\n    };\n    try {\n      const response = await api.post(`${userID}/pets/register`, newPet, {\n        headers: {\n          'x-access-token': auth.accessToken\n        }\n      });\n      console.log(response.data);\n      const allPets = [...pets, response.data]; // append new post to allPosts\n      setPets(allPets); // set Posts to allPosts\n      setPetName(''); // reset the setPostTitle and setPostBody to empty\n      setPetType('');\n      setDob('');\n      setDeworm(format(new Date(), 'M-d-y'));\n      setGender('');\n      setSter('false');\n      setPetDesc('');\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!petName) return;\n    addPet(petName, petType, dob, deworm, gender, ster, petDesc, userID); // addItem function\n    navigate('/'); // return to home page after submitting post\n  };\n  // ------------------- REQUEST in CRUD ------------------- //\n  useEffect(() => {\n    const fetchPets = async () => {\n      try {\n        // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n        const response = await api.get(`${userID}/pets`, {\n          headers: {\n            'x-access-token': auth.accessToken\n          }\n        });\n        setPets(response.data); // response.data is in json format\n        console.log(response.data);\n      } catch (err) {\n        if (err.response) {\n          // Not in the 200 response range\n          console.log(err.response.data);\n          console.log(err.response.status);\n          console.log(err.response.headers);\n        } else {\n          console.log(`Error: ${err.message}`);\n        }\n      }\n    };\n    fetchPets();\n  }, [userID, auth]); // [] to show dependency so it won't infinitely request from server\n\n  // ------------------- UPDATE in CRUD ------------------- //\n  const handleEdit = async id => {\n    const updatePet = {\n      id,\n      pet_type: newPetType,\n      pet_dob: newDob,\n      pet_gender: newGender,\n      last_deworm: newDeworm,\n      sterilised: newSter.toLowerCase() === 'true',\n      pet_description: newPetDesc,\n      pet_name: newPetName\n    };\n    try {\n      const response = await api.patch(`${userID}/pets/${id}`, updatePet, {\n        headers: {\n          'x-access-token': auth.accessToken\n        }\n      });\n      console.log(response.data);\n      setPets(pets.map(pet => pet.id.toString() === id ? {\n        ...response.data\n      } : pet)); // if pet id matches then update\n      setNewPetName('');\n      navigate(`/post/${id}`);\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  };\n  // ------------------- DELETE in CRUD ------------------- //\n  const handleDelete = async id => {\n    try {\n      await api.delete(`${userID}/pets/${id}`, {\n        headers: {\n          'x-access-token': auth.accessToken\n        }\n      });\n      const petsList = pets.filter(pet => pet.id !== id); // filter out the posts with post.id not equal to the id of the post we want to delete\n      setPets(petsList); // setPets to the newly filtered postsList\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n    navigate('/');\n  };\n\n  // ------------------- Filter Search Results on Home page ------------------- //\n  useEffect(() => {\n    const filteredResults = pets.filter(pet => pet.pet_name.toLowerCase().includes(search.toLowerCase()));\n    setSearchResults(filteredResults.reverse());\n  }, [pets, search]);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      search,\n      setSearch,\n      searchResults,\n      setSearchResults,\n      handleSubmit,\n      petName,\n      setPetName,\n      petType,\n      setPetType,\n      dob,\n      setDob,\n      deworm,\n      setDeworm,\n      gender,\n      setGender,\n      ster,\n      setSter,\n      petDesc,\n      setPetDesc,\n      pets,\n      handleDelete,\n      handleEdit,\n      newPetName,\n      setNewPetName,\n      newPetType,\n      setNewPetType,\n      newDob,\n      setNewDob,\n      newDeworm,\n      setNewDeworm,\n      newGender,\n      setNewGender,\n      newSter,\n      setNewSter,\n      newPetDesc,\n      setNewPetDesc,\n      user,\n      setUser,\n      pwd,\n      setPwd,\n      userID,\n      setUserID,\n      auth,\n      setAuth,\n      picURL,\n      setPicURL,\n      navigate,\n      medicalRecord,\n      setMedicalRecord,\n      email,\n      setEmail\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n};\n_s(DataProvider, \"9FOZMUxjYS8Y+4vhP7+/9H3xb8M=\", false, function () {\n  return [useNavigate];\n});\n_c = DataProvider;\nexport default DataContext;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useNavigate","format","api","React","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","pets","setPets","search","setSearch","searchResults","setSearchResults","picURL","setPicURL","navigate","user","setUser","pwd","setPwd","userID","setUserID","auth","setAuth","email","setEmail","petName","setPetName","petType","setPetType","dob","setDob","deworm","setDeworm","Date","gender","setGender","ster","setSter","petDesc","setPetDesc","newPetName","setNewPetName","newPetType","setNewPetType","newDob","setNewDob","newDeworm","setNewDeworm","newGender","setNewGender","newSter","setNewSter","newPetDesc","setNewPetDesc","medicalRecord","setMedicalRecord","addPet","id","length","isSterilised","toLowerCase","newPet","pet_name","pet_type","pet_dob","pet_gender","last_deworm","sterilised","pet_description","user_id","response","post","headers","accessToken","console","log","data","allPets","err","message","handleSubmit","e","preventDefault","fetchPets","get","status","handleEdit","updatePet","patch","map","pet","toString","handleDelete","delete","petsList","filter","filteredResults","includes","reverse","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/context/DataContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport api from '../api/axios';\nimport React from 'react';\n\nconst DataContext = createContext({});\n\nexport const DataProvider = ({ children }) => {\n    const [pets, setPets] = useState([]); /* default state is an array loaded from local storage or an empty array, in the event the database shoppinglist is deleted */\n    const [search, setSearch] = useState('');\n    const [searchResults, setSearchResults] = useState([]); // array of search results\n    const [picURL, setPicURL] = useState('')\n    const navigate = useNavigate();\n\n    // Inputs for Login\n    const [user, setUser] = useState('');\n    const [pwd, setPwd] = useState('');\n    const [userID, setUserID] = useState('');\n    const [auth, setAuth] = useState({})\n    const [email, setEmail] = useState('');\n\n    // Inputs for Pet in POST\n    const [petName, setPetName] = useState('');\n    const [petType, setPetType] = useState('');\n    const [dob, setDob] = useState('');\n    // const [deworm, setDeworm] = useState(format(new Date(), 'M-d-y'));\n    const [deworm, setDeworm] = useState(new Date());\n    const [gender, setGender] = useState('');\n    const [ster, setSter] = useState('false');\n    const [petDesc, setPetDesc] = useState('');\n\n    // Inputs for Pet in PATCH\n    const [newPetName, setNewPetName] = useState(petName);\n    const [newPetType, setNewPetType] = useState(petType);\n    const [newDob, setNewDob] = useState(dob);\n    const [newDeworm, setNewDeworm] = useState(deworm);\n    const [newGender, setNewGender] = useState(gender);\n    const [newSter, setNewSter] = useState(ster);\n    const [newPetDesc, setNewPetDesc] = useState(petDesc);\n\n    // Inputs for Pet Medical\n    const [medicalRecord, setMedicalRecord] = useState();\n\n    // ------------------- CREATE in CRUD ------------------- //\n    const addPet = async (petName, petType, dob, deworm, gender, ster, petDesc, userID) => {\n        const id = pets.length ? pets[pets.length - 1].id + 1 : 1; // to reference the last post --> posts[posts.length-1]\n        const isSterilised = (ster.toLowerCase()) === 'true';\n        const newPet = {\n            id,\n            pet_name: petName,\n            pet_type: petType,\n            pet_dob: dob,\n            pet_gender: gender,\n            last_deworm: deworm,\n            sterilised: isSterilised,\n            pet_description: petDesc,\n            user_id: userID\n        };\n\n        try {\n            const response = await api.post(`${userID}/pets/register`, newPet, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            })\n            console.log(response.data)\n            const allPets = [...pets, response.data]; // append new post to allPosts\n            setPets(allPets); // set Posts to allPosts\n            setPetName(''); // reset the setPostTitle and setPostBody to empty\n            setPetType('');\n            setDob('');\n            setDeworm(format(new Date(), 'M-d-y'));\n            setGender('');\n            setSter('false');\n            setPetDesc('');\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!petName) return;\n        addPet(petName, petType, dob, deworm, gender, ster, petDesc, userID) // addItem function\n        navigate('/'); // return to home page after submitting post\n    }\n    // ------------------- REQUEST in CRUD ------------------- //\n    useEffect(() => {\n        const fetchPets = async () => {\n            try {\n                // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n                const response = await api.get(`${userID}/pets`, {\n                    headers: {\n                        'x-access-token': auth.accessToken\n                    }\n                });\n                setPets(response.data); // response.data is in json format\n                console.log(response.data)\n\n            } catch (err) {\n                if (err.response) { // Not in the 200 response range\n                    console.log(err.response.data);\n                    console.log(err.response.status);\n                    console.log(err.response.headers);\n                } else { console.log(`Error: ${err.message}`) }\n            }\n        }\n        fetchPets();\n    }, [userID, auth]) // [] to show dependency so it won't infinitely request from server\n\n    // ------------------- UPDATE in CRUD ------------------- //\n    const handleEdit = async (id) => {\n        const updatePet = {\n            id,\n            pet_type: newPetType,\n            pet_dob: newDob,\n            pet_gender: newGender,\n            last_deworm: newDeworm,\n            sterilised: (newSter.toLowerCase()) === 'true',\n            pet_description: newPetDesc,\n            pet_name: newPetName\n        };\n        try {\n            const response = await api.patch(`${userID}/pets/${id}`, updatePet, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            console.log(response.data)\n            setPets(pets.map(pet => (pet.id).toString() === id ? { ...response.data } : pet)) // if pet id matches then update\n            setNewPetName('')\n            navigate(`/post/${id}`)\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n    }\n    // ------------------- DELETE in CRUD ------------------- //\n    const handleDelete = async (id) => {\n        try {\n            await api.delete(`${userID}/pets/${id}`, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            const petsList = pets.filter(pet => pet.id !== id); // filter out the posts with post.id not equal to the id of the post we want to delete\n            setPets(petsList); // setPets to the newly filtered postsList\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n        navigate('/');\n    }\n\n    // ------------------- Filter Search Results on Home page ------------------- //\n    useEffect(() => {\n        const filteredResults = pets.filter((pet) =>\n            ((pet.pet_name).toLowerCase()).includes(search.toLowerCase()));\n        setSearchResults(filteredResults.reverse());\n    }, [pets, search])\n\n    return (\n        <DataContext.Provider value={{\n            search, setSearch,\n            searchResults, setSearchResults,\n            handleSubmit, petName, setPetName, petType, setPetType, dob, setDob, deworm, setDeworm, gender, setGender, ster, setSter, petDesc, setPetDesc,\n            pets, handleDelete,\n            handleEdit, newPetName, setNewPetName, newPetType, setNewPetType, newDob, setNewDob, newDeworm, setNewDeworm, newGender, setNewGender, newSter, setNewSter, newPetDesc, setNewPetDesc,\n            user, setUser, pwd, setPwd, userID, setUserID, auth, setAuth, picURL, setPicURL, navigate,\n            medicalRecord, setMedicalRecord, email, setEmail\n        }}>\n            {children}\n        </DataContext.Provider>\n    )\n}\n\nexport default DataContext;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}