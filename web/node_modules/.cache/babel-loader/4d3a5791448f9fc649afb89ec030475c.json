{"ast":null,"code":"var _jsxFileName = \"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/medicals/EditPetMedicalRecord.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { useContext } from 'react';\nimport DataContext from '../context/DataContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const EditPetMedicalRecord = () => {\n  _s();\n\n  // Inputs for Pet in PATCH\n  const {\n    medicalRecord,\n    userID,\n    setMedicalRecord\n  } = useContext(DataContext);\n  console.log(medicalRecord);\n  const {\n    id,\n    record_id\n  } = useParams(); // extract the id from the link\n\n  console.log(record_id);\n  const record = medicalRecord.find(record => record.id.toString() === record_id);\n  const [newClinic, setNewClinic] = useState('');\n  const [newDoctor, setNewDoctor] = useState('');\n  const [newAddress, setNewAddress] = useState('');\n  const [newPhone, setNewPhone] = useState('');\n  const [newDate, setNewDate] = useState('');\n  const [newReason, setNewReason] = useState('');\n  useEffect(() => {\n    // To pre-fill the form with existing info\n    if (record) {\n      setNewClinic(record.clinic);\n      setNewDoctor(record.doctor);\n      setNewAddress(record.address);\n      setNewPhone(record.phone);\n      setNewDate(record.date);\n      setNewReason(record.agenda);\n    }\n  }, [record, setNewClinic, setNewDoctor, setNewAddress, setNewPhone, setNewDate, setNewReason]);\n\n  const handleMedicalEdit = async record_id => {\n    const updateMedical = {\n      id: record_id,\n      date: newDate,\n      clinic: newClinic,\n      address: newAddress,\n      phone: newPhone,\n      doctor: newDoctor,\n      agenda: newReason\n    };\n\n    try {\n      const response = await api.patch(`${userID}/pets/${id}/medical`, updatePet, {\n        headers: {\n          'x-access-token': auth.accessToken\n        }\n      });\n      console.log(response.data); // setMedicalRecord(pets.map(pet => (pet.id).toString() === id ? { ...response.data } : pet)) // if pet id matches then update\n\n      navigate(`/post/${id}`);\n    } catch (err) {\n      console.log(`Error: ${err.message}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"NewPost\",\n    children: [record && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Medical Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"newPostForm\",\n        onSubmit: e => e.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postTitle\",\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postTitle\",\n          type: \"text\",\n          required: true,\n          value: newDate,\n          onChange: e => setNewDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postTitle\",\n          children: \"Clinic:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postTitle\",\n          type: \"text\",\n          required: true,\n          value: newClinic,\n          onChange: e => setNewClinic(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postTitle\",\n          children: \"Address:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postTitle\",\n          type: \"text\",\n          required: true,\n          value: newAddress,\n          onChange: e => setNewAddress(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postTitle\",\n          children: \"Phone:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postTitle\",\n          type: \"text\",\n          required: true,\n          value: newPhone,\n          onChange: e => setNewPhone(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postTitle\",\n          children: \"Doctor:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postTitle\",\n          type: \"text\",\n          required: true,\n          value: newDoctor,\n          onChange: e => setNewDoctor(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"postTitle\",\n          children: \"Reason:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postTitle\",\n          type: \"text\",\n          required: true,\n          value: newReason,\n          onChange: e => setNewReason(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: () => handleMedicalEdit(record_id),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), !record && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Page Not Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Well, that's disappointing.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Visit Our Homepage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditPetMedicalRecord, \"QInrKL7gGolmHGIlv9lPN1goA7s=\", false, function () {\n  return [useParams];\n});\n\n_c = EditPetMedicalRecord;\nexport default EditPetMedicalRecord;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPetMedicalRecord\");","map":{"version":3,"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/medicals/EditPetMedicalRecord.js"],"names":["useEffect","useState","useParams","Link","useContext","DataContext","EditPetMedicalRecord","medicalRecord","userID","setMedicalRecord","console","log","id","record_id","record","find","toString","newClinic","setNewClinic","newDoctor","setNewDoctor","newAddress","setNewAddress","newPhone","setNewPhone","newDate","setNewDate","newReason","setNewReason","clinic","doctor","address","phone","date","agenda","handleMedicalEdit","updateMedical","response","api","patch","updatePet","headers","auth","accessToken","data","navigate","err","message","e","preventDefault","target","value"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,kBAAhC;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AAAA;;AACtC;AACA,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,MAAjB;AAAyBC,IAAAA;AAAzB,MAA8CL,UAAU,CAACC,WAAD,CAA9D;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AACA,QAAM;AAAEK,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAoBX,SAAS,EAAnC,CAJsC,CAIC;;AACvCQ,EAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ;AACA,QAAMC,MAAM,GAAGP,aAAa,CAACQ,IAAd,CAAmBD,MAAM,IAAKA,MAAM,CAACF,EAAR,CAAYI,QAAZ,OAA2BH,SAAxD,CAAf;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACwB,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC0B,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC,EAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIc,MAAJ,EAAY;AACRI,MAAAA,YAAY,CAACJ,MAAM,CAACe,MAAR,CAAZ;AACAT,MAAAA,YAAY,CAACN,MAAM,CAACgB,MAAR,CAAZ;AACAR,MAAAA,aAAa,CAACR,MAAM,CAACiB,OAAR,CAAb;AACAP,MAAAA,WAAW,CAACV,MAAM,CAACkB,KAAR,CAAX;AACAN,MAAAA,UAAU,CAACZ,MAAM,CAACmB,IAAR,CAAV;AACAL,MAAAA,YAAY,CAACd,MAAM,CAACoB,MAAR,CAAZ;AACH;AACJ,GAVQ,EAUN,CAACpB,MAAD,EAASI,YAAT,EAAuBE,YAAvB,EAAqCE,aAArC,EAAoDE,WAApD,EAAkEE,UAAlE,EAA8EE,YAA9E,CAVM,CAAT;;AAYA,QAAMO,iBAAiB,GAAG,MAAOtB,SAAP,IAAqB;AAC3C,UAAMuB,aAAa,GAAG;AAClBxB,MAAAA,EAAE,EAAEC,SADc;AAElBoB,MAAAA,IAAI,EAAER,OAFY;AAGlBI,MAAAA,MAAM,EAAEZ,SAHU;AAIlBc,MAAAA,OAAO,EAAEV,UAJS;AAKlBW,MAAAA,KAAK,EAAET,QALW;AAMlBO,MAAAA,MAAM,EAAEX,SANU;AAOlBe,MAAAA,MAAM,EAAEP;AAPU,KAAtB;;AASA,QAAI;AACA,YAAMU,QAAQ,GAAG,MAAMC,GAAG,CAACC,KAAJ,CAAW,GAAE/B,MAAO,SAAQI,EAAG,UAA/B,EAA0C4B,SAA1C,EAAqD;AACxEC,QAAAA,OAAO,EAAE;AACL,4BAAkBC,IAAI,CAACC;AADlB;AAD+D,OAArD,CAAvB;AAKAjC,MAAAA,OAAO,CAACC,GAAR,CAAY0B,QAAQ,CAACO,IAArB,EANA,CAOA;;AACAC,MAAAA,QAAQ,CAAE,SAAQjC,EAAG,EAAb,CAAR;AACH,KATD,CASE,OAAOkC,GAAP,EAAY;AACVpC,MAAAA,OAAO,CAACC,GAAR,CAAa,UAASmC,GAAG,CAACC,OAAQ,EAAlC;AACH;AACJ,GAtBD;;AAwBA,sBACI;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA,eACKjC,MAAM,iBACH;AAAA,8BACI;AAAA,kBAAI;AAAJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,SAAS,EAAC,aAAhB;AAA8B,QAAA,QAAQ,EAAGkC,CAAD,IAAKA,CAAC,CAACC,cAAF,EAA7C;AAAA,gCACI;AAAO,UAAA,OAAO,EAAC,WAAf;AAAA,oBAA2B;AAA3B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACI,UAAA,EAAE,EAAC,WADP;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,QAAQ,MAHZ;AAII,UAAA,KAAK,EAAGxB,OAJZ;AAKI,UAAA,QAAQ,EAAGuB,CAAD,IAAOtB,UAAU,CAACsB,CAAC,CAACE,MAAF,CAASC,KAAV;AAL/B;AAAA;AAAA;AAAA;AAAA,gBAFJ,eASI;AAAO,UAAA,OAAO,EAAC,WAAf;AAAA,oBAA2B;AAA3B;AAAA;AAAA;AAAA;AAAA,gBATJ,eAUI;AACI,UAAA,EAAE,EAAC,WADP;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,QAAQ,MAHZ;AAII,UAAA,KAAK,EAAGlC,SAJZ;AAKI,UAAA,QAAQ,EAAG+B,CAAD,IAAO9B,YAAY,CAAC8B,CAAC,CAACE,MAAF,CAASC,KAAV;AALjC;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAiBI;AAAO,UAAA,OAAO,EAAC,WAAf;AAAA,oBAA2B;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAjBJ,eAkBI;AACI,UAAA,EAAE,EAAC,WADP;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,QAAQ,MAHZ;AAII,UAAA,KAAK,EAAG9B,UAJZ;AAKI,UAAA,QAAQ,EAAG2B,CAAD,IAAO1B,aAAa,CAAC0B,CAAC,CAACE,MAAF,CAASC,KAAV;AALlC;AAAA;AAAA;AAAA;AAAA,gBAlBJ,eAyBI;AAAO,UAAA,OAAO,EAAC,WAAf;AAAA,oBAA2B;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAzBJ,eA0BI;AACI,UAAA,EAAE,EAAC,WADP;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,QAAQ,MAHZ;AAII,UAAA,KAAK,EAAG5B,QAJZ;AAKI,UAAA,QAAQ,EAAGyB,CAAD,IAAOxB,WAAW,CAACwB,CAAC,CAACE,MAAF,CAASC,KAAV;AALhC;AAAA;AAAA;AAAA;AAAA,gBA1BJ,eAiCI;AAAO,UAAA,OAAO,EAAC,WAAf;AAAA,oBAA2B;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAjCJ,eAkCI;AACI,UAAA,EAAE,EAAC,WADP;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,QAAQ,MAHZ;AAII,UAAA,KAAK,EAAGhC,SAJZ;AAKI,UAAA,QAAQ,EAAG6B,CAAD,IAAO5B,YAAY,CAAC4B,CAAC,CAACE,MAAF,CAASC,KAAV;AALjC;AAAA;AAAA;AAAA;AAAA,gBAlCJ,eAyCI;AAAO,UAAA,OAAO,EAAC,WAAf;AAAA,oBAA2B;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAzCJ,eA0CI;AACI,UAAA,EAAE,EAAC,WADP;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,QAAQ,MAHZ;AAII,UAAA,KAAK,EAAGxB,SAJZ;AAKI,UAAA,QAAQ,EAAGqB,CAAD,IAAOpB,YAAY,CAACoB,CAAC,CAACE,MAAF,CAASC,KAAV;AALjC;AAAA;AAAA;AAAA;AAAA,gBA1CJ,eAiDI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAE,MAAMhB,iBAAiB,CAACtB,SAAD,CAAtD;AAAA,oBAAmE;AAAnE;AAAA;AAAA;AAAA;AAAA,gBAjDJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBAFR,EA2DK,CAACC,MAAD,iBACG;AAAA,8BACI;AAAA,kBAAI;AAAJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAG;AAAH;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,GAAT;AAAA,oBAAa;AAAb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA,oBA5DR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuEH,CAzHM;;GAAMR,oB;UAIiBJ,S;;;KAJjBI,oB;AA2Hb,eAAeA,oBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { useContext } from 'react';\nimport DataContext from '../context/DataContext';\n\nexport const EditPetMedicalRecord = () => {\n    // Inputs for Pet in PATCH\n    const { medicalRecord, userID, setMedicalRecord } = useContext(DataContext);\n    console.log(medicalRecord);\n    const { id, record_id } = useParams(); // extract the id from the link\n    console.log(record_id)\n    const record = medicalRecord.find(record => (record.id).toString() === record_id);\n    const [newClinic, setNewClinic] = useState('');\n    const [newDoctor, setNewDoctor] = useState('');\n    const [newAddress, setNewAddress] = useState('');\n    const [newPhone, setNewPhone] = useState('');\n    const [newDate, setNewDate] = useState('');\n    const [newReason, setNewReason] = useState('');\n\n    useEffect(() => {\n        // To pre-fill the form with existing info\n        if (record) {\n            setNewClinic(record.clinic);\n            setNewDoctor(record.doctor);\n            setNewAddress(record.address);\n            setNewPhone(record.phone);\n            setNewDate(record.date);\n            setNewReason(record.agenda);\n        }\n    }, [record, setNewClinic, setNewDoctor, setNewAddress, setNewPhone,  setNewDate, setNewReason])\n    \n    const handleMedicalEdit = async (record_id) => {\n        const updateMedical = {\n            id: record_id,\n            date: newDate,\n            clinic: newClinic,\n            address: newAddress,\n            phone: newPhone,\n            doctor: newDoctor,\n            agenda: newReason\n        };\n        try {\n            const response = await api.patch(`${userID}/pets/${id}/medical`, updatePet, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            console.log(response.data)\n            // setMedicalRecord(pets.map(pet => (pet.id).toString() === id ? { ...response.data } : pet)) // if pet id matches then update\n            navigate(`/post/${id}`)\n        } catch (err) {\n            console.log(`Error: ${err.message}`)\n        }\n    }\n\n    return (\n        <main className=\"NewPost\">\n            {record &&\n                <>\n                    <h2>Edit Medical Record</h2>\n                    <form className=\"newPostForm\" onSubmit={(e)=>e.preventDefault()}>\n                        <label htmlFor=\"postTitle\">Date:</label>\n                        <input\n                            id=\"postTitle\"\n                            type=\"text\"\n                            required\n                            value={ newDate }\n                            onChange={(e) => setNewDate(e.target.value)}\n                        />\n                        <label htmlFor=\"postTitle\">Clinic:</label>\n                        <input\n                            id=\"postTitle\"\n                            type=\"text\"\n                            required\n                            value={ newClinic }\n                            onChange={(e) => setNewClinic(e.target.value)}\n                        />\n                        <label htmlFor=\"postTitle\">Address:</label>\n                        <input\n                            id=\"postTitle\"\n                            type=\"text\"\n                            required\n                            value={ newAddress }\n                            onChange={(e) => setNewAddress(e.target.value)}\n                        />\n                        <label htmlFor=\"postTitle\">Phone:</label>\n                        <input\n                            id=\"postTitle\"\n                            type=\"text\"\n                            required\n                            value={ newPhone }\n                            onChange={(e) => setNewPhone(e.target.value)}\n                        />\n                        <label htmlFor=\"postTitle\">Doctor:</label>\n                        <input\n                            id=\"postTitle\"\n                            type=\"text\"\n                            required\n                            value={ newDoctor }\n                            onChange={(e) => setNewDoctor(e.target.value)}\n                        />\n                        <label htmlFor=\"postTitle\">Reason:</label>\n                        <input\n                            id=\"postTitle\"\n                            type=\"text\"\n                            required\n                            value={ newReason }\n                            onChange={(e) => setNewReason(e.target.value)}\n                        />\n                        <button type=\"submit\" onClick={() => handleMedicalEdit(record_id)}>Submit</button>\n\n                    </form>\n                </>\n            }\n\n            {!record && \n                <>\n                    <h2>Page Not Found</h2>\n                    <p>Well, that's disappointing.</p>\n                    <p>\n                        <Link to='/'>Visit Our Homepage</Link>\n                    </p>\n                </>\n            }\n        </main>\n    )\n}\n\nexport default EditPetMedicalRecord"]},"metadata":{},"sourceType":"module"}