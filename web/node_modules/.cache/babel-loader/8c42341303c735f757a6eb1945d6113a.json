{"ast":null,"code":"var _jsxFileName = \"/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Layout from './Layout';\nimport Home from './Home';\nimport NewPost from './NewPost';\nimport PostPage from './PostPage';\nimport About from './About';\nimport Missing from './Missing';\nimport { Route, Routes, useNavigate } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const API_URL = 'http://127.0.0.1:5000/pets/';\n  const [pets, setPets] = useState([]);\n  /* default state is an array loaded from local storage or an empty array, in the event the database shoppinglist is deleted */\n\n  const [newPet, setNewPet] = useState('');\n  const [newPetType, setNewPetType] = useState('');\n  const [search, setSearch] = useState('');\n  const [fetchError, setFetchError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchResults, setSearchResults] = useState([]); // array of search results\n\n  const [postTitle, setPostTitle] = useState('');\n  const [postBody, setPostBody] = useState('');\n  const navigate = useNavigate();\n  /* REQUEST in CRUD - used in useEffect */\n\n  async function fetchPets() {\n    try {\n      // const response = await fetch(API_URL, {method: \"GET\"});\n      const response = await fetch(API_URL, {\n        method: \"GET\"\n      });\n      if (!response.ok) throw Error('Did not receive expected data');\n      const listPets = await response.json();\n      setPets(listPets);\n      setFetchError(null); // console.log(listPets)\n    } catch (err) {\n      setFetchError(err.message);\n    } finally {\n      setIsLoading(false);\n      /* tracking the state of IsLoading */\n    }\n  }\n\n  async function fetchPets() {\n    try {\n      // const response = await fetch(API_URL, {method: \"GET\"});\n      const response = await fetch(API_URL, {\n        method: \"GET\",\n        mode: 'cors'\n      });\n      if (!response.ok) throw Error('Did not receive expected data');\n      const listPets = await response.json();\n      setPets(listPets);\n      setFetchError(null); // console.log(listPets)\n    } catch (err) {\n      setFetchError(err.message);\n    } finally {\n      setIsLoading(false);\n      /* tracking the state of IsLoading */\n    }\n  }\n\n  useEffect(() => {\n    fetchPets();\n    setTimeout(() => {\n      (async () => await fetchPets())();\n    }, 2000);\n    const filteredResults = pets.filter(pet => pet.pet_name.toLowerCase().includes(search.toLowerCase()));\n    setSearchResults(filteredResults.reverse());\n  }, [search]); // [] to show dependency so it won't infinitely request from server\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = pets.length ? pets[pets.length - 1].id + 1 : 1; // to reference the last post --> posts[posts.length-1]\n\n    const datetime = format(new Date(), 'MMMM dd, yyyy pp'); // pp for time\n\n    const newPet = {\n      id,\n      title: postTitle,\n      datetime,\n      body: postBody\n    };\n    const allPets = [...pets, newPet]; // append new post to allPosts\n\n    setPets(allPets); // set Posts to allPosts\n\n    setPostTitle(''); // reset the setPostTitle and setPostBody to empty\n\n    setPostBody('');\n    navigate('/'); // return to home page after submitting post\n  };\n\n  const handleDelete = id => {\n    // filter out the posts with post.id not equal to the id of the post we want to delete\n    const petsList = pets.filter(pet => pet.id !== id);\n    setPets(petsList); // set the Posts to the newly filtered postsList\n\n    navigate('/');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(Layout, {\n        search: search,\n        setSearch: setSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 32\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(Home, {\n          pets: pets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 31\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          index: true,\n          element: /*#__PURE__*/_jsxDEV(NewPost, {\n            handleSubmit: handleSubmit,\n            postTitle: postTitle,\n            setPostTitle: setPostTitle,\n            postBody: postBody,\n            setPostBody: setPostBody\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \":id\",\n          element: /*#__PURE__*/_jsxDEV(PostPage, {\n            pets: pets,\n            handleDelete: handleDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"about\",\n        element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Missing, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Y+2PL4zrsQKK1WpgytA0XECj6Ds=\", false, function () {\n  return [useNavigate];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/petbook/src/App.js"],"names":["Layout","Home","NewPost","PostPage","About","Missing","Route","Routes","useNavigate","useState","useEffect","format","App","API_URL","pets","setPets","newPet","setNewPet","newPetType","setNewPetType","search","setSearch","fetchError","setFetchError","isLoading","setIsLoading","searchResults","setSearchResults","postTitle","setPostTitle","postBody","setPostBody","navigate","fetchPets","response","fetch","method","ok","Error","listPets","json","err","message","mode","setTimeout","filteredResults","filter","pet","pet_name","toLowerCase","includes","reverse","handleSubmit","e","preventDefault","id","length","datetime","Date","title","body","allPets","handleDelete","petsList"],"mappings":"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","sourcesContent":["import Layout from './Layout';\nimport Home from './Home';\nimport NewPost from './NewPost';\nimport PostPage from './PostPage';\nimport About from './About';\nimport Missing from './Missing';\nimport { Route, Routes, useNavigate } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\n\nfunction App() {\n  const API_URL = 'http://127.0.0.1:5000/pets/';\n  const [pets, setPets] = useState([]); /* default state is an array loaded from local storage or an empty array, in the event the database shoppinglist is deleted */\n  const [newPet, setNewPet] = useState('');\n  const [newPetType, setNewPetType] = useState('')\n  const [search, setSearch] = useState('');\n  const [fetchError, setFetchError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchResults, setSearchResults] = useState([]); // array of search results\n  const [postTitle, setPostTitle] = useState('');\n  const [postBody, setPostBody] = useState('');\n  const navigate = useNavigate();\n\n  /* REQUEST in CRUD - used in useEffect */\n  async function fetchPets(){\n    try {\n      // const response = await fetch(API_URL, {method: \"GET\"});\n      const response = await fetch(API_URL, {method: \"GET\"});\n      if (!response.ok) throw Error('Did not receive expected data');\n      const listPets = await response.json();\n      setPets(listPets);\n      setFetchError(null);\n      // console.log(listPets)\n    } catch (err) {\n      setFetchError(err.message);\n    } finally {\n      setIsLoading(false); /* tracking the state of IsLoading */\n    }\n  }\n\n  async function fetchPets(){\n    try {\n      // const response = await fetch(API_URL, {method: \"GET\"});\n      const response = await fetch(API_URL, {method: \"GET\", mode:'cors'});\n      if (!response.ok) throw Error('Did not receive expected data');\n      const listPets = await response.json();\n      setPets(listPets);\n      setFetchError(null);\n      // console.log(listPets)\n    } catch (err) {\n      setFetchError(err.message);\n    } finally {\n      setIsLoading(false); /* tracking the state of IsLoading */\n    }\n  }\n\n  useEffect(() => {\n    fetchPets();\n    setTimeout(() => {\n      (async () => await fetchPets())();\n    }, 2000);\n    const filteredResults = pets.filter((pet) =>\n    ((pet.pet_name).toLowerCase()).includes(search.toLowerCase()));\n    setSearchResults(filteredResults.reverse());\n  }, [search]) // [] to show dependency so it won't infinitely request from server\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = pets.length ? pets[pets.length - 1].id + 1 : 1; // to reference the last post --> posts[posts.length-1]\n    const datetime = format(new Date(), 'MMMM dd, yyyy pp'); // pp for time\n    const newPet = { \n      id, \n      title: postTitle, \n      datetime, \n      body: postBody };\n    const allPets = [...pets, newPet]; // append new post to allPosts\n    setPets(allPets); // set Posts to allPosts\n    setPostTitle(''); // reset the setPostTitle and setPostBody to empty\n    setPostBody('');\n    navigate('/'); // return to home page after submitting post\n  }\n\n  const handleDelete = (id) => {\n    // filter out the posts with post.id not equal to the id of the post we want to delete\n    const petsList = pets.filter(pet => pet.id !== id);\n    setPets(petsList); // set the Posts to the newly filtered postsList\n    navigate('/');\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Layout\n        search={search}\n        setSearch={setSearch}\n      />}>\n        <Route index element={<Home pets={pets} />} />\n        <Route path=\"post\">\n          <Route index element={<NewPost\n            handleSubmit={handleSubmit}\n            postTitle={postTitle}\n            setPostTitle={setPostTitle}\n            postBody={postBody}\n            setPostBody={setPostBody}\n          />} />\n          <Route path=\":id\" element={<PostPage\n            pets={pets}\n            handleDelete={handleDelete}\n          />} />\n        </Route>\n        <Route path=\"about\" element={<About />} />\n        <Route path=\"*\" element={<Missing />} />\n      </Route>\n    </Routes>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}