{"ast":null,"code":"var _jsxFileName = \"/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/PetMedical.js\",\n    _s = $RefreshSig$();\n\nimport { useParams, Link } from \"react-router-dom\";\nimport { useContext, useState, useEffect } from 'react';\nimport DataContext from './context/DataContext';\nimport api from './api/posts';\nimport PetMedicalRecord from \"./PetMedicalRecord\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PetMedical = () => {\n  _s();\n\n  const [medicalRecord, setMedicalRecord] = useState();\n  const {\n    pets,\n    userID,\n    auth\n  } = useContext(DataContext);\n  const {\n    id\n  } = useParams(); // id is used in Route\n\n  const pet = pets.find(pet => pet.id.toString() === id); // === is for string match, == for numeric\n\n  useEffect(() => {\n    const fetchMedical = async () => {\n      try {\n        // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n        const response = await api.get(`${userID}/pets/${pet.id}/medical/all`, {\n          headers: {\n            'x-access-token': auth.accessToken\n          }\n        });\n        setMedicalRecord(response.data); // response.data is in json format\n      } catch (err) {\n        if (err.response) {\n          // Not in the 200 response range\n          console.log(err.response.data);\n          console.log(err.response.status);\n          console.log(err.response.headers);\n        } else {\n          console.log(`Error: ${err.message}`);\n        }\n      }\n    };\n\n    fetchMedical();\n  }, [pet.id, auth, userID]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: medicalRecord ? medicalRecord.map(record => /*#__PURE__*/_jsxDEV(PetMedicalRecord, {\n      record: record\n    }, record.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this)) : \"missing record\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PetMedical, \"sKfLi4/w1GsVJItd2mr2eYa+nyk=\", false, function () {\n  return [useParams];\n});\n\n_c = PetMedical;\nexport default PetMedical;\n\nvar _c;\n\n$RefreshReg$(_c, \"PetMedical\");","map":{"version":3,"sources":["/Users/tungngo/Dropbox/Personal/Learning/React/webapp/petbook/web/src/PetMedical.js"],"names":["useParams","Link","useContext","useState","useEffect","DataContext","api","PetMedicalRecord","PetMedical","medicalRecord","setMedicalRecord","pets","userID","auth","id","pet","find","toString","fetchMedical","response","get","headers","accessToken","data","err","console","log","status","message","map","record"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,IAApB,QAAgC,kBAAhC;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,EAAlD;AACA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,MAAyBX,UAAU,CAACG,WAAD,CAAzC;AACA,QAAM;AAAES,IAAAA;AAAF,MAASd,SAAS,EAAxB,CAHqB,CAGO;;AAC5B,QAAMe,GAAG,GAAGJ,IAAI,CAACK,IAAL,CAAUD,GAAG,IAAKA,GAAG,CAACD,EAAL,CAASG,QAAT,OAAwBH,EAAzC,CAAZ,CAJqB,CAIqC;;AAE1DV,EAAAA,SAAS,CAAC,MAAM;AAChB,UAAMc,YAAY,GAAG,YAAY;AAC7B,UAAI;AACA;AACA,cAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAJ,CAAS,GAAER,MAAO,SAAQG,GAAG,CAACD,EAAG,cAAjC,EAAgD;AACnEO,UAAAA,OAAO,EAAE;AACL,8BAAkBR,IAAI,CAACS;AADlB;AAD0D,SAAhD,CAAvB;AAKAZ,QAAAA,gBAAgB,CAACS,QAAQ,CAACI,IAAV,CAAhB,CAPA,CAOiC;AAEpC,OATD,CASE,OAAOC,GAAP,EAAY;AACV,YAAIA,GAAG,CAACL,QAAR,EAAkB;AAAE;AAChBM,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,QAAJ,CAAaI,IAAzB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,QAAJ,CAAaQ,MAAzB;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,QAAJ,CAAaE,OAAzB;AACH,SAJD,MAIO;AAAEI,UAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,GAAG,CAACI,OAAQ,EAAlC;AAAsC;AAClD;AACJ,KAjBD;;AAkBAV,IAAAA,YAAY;AACX,GApBQ,EAoBN,CAACH,GAAG,CAACD,EAAL,EAASD,IAAT,EAAeD,MAAf,CApBM,CAAT;AAsBA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACKH,aAAa,GAAGA,aAAa,CAACoB,GAAd,CAAkBC,MAAM,iBACrC,QAAC,gBAAD;AAAkB,MAAA,MAAM,EAAEA;AAA1B,OAAuCA,MAAM,CAAChB,EAA9C;AAAA;AAAA;AAAA;AAAA,YADa,CAAH,GAET;AAHT;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CArCD;;GAAMN,U;UAGaR,S;;;KAHbQ,U;AAuCN,eAAeA,UAAf","sourcesContent":["import { useParams, Link } from \"react-router-dom\";\nimport { useContext, useState, useEffect } from 'react';\nimport DataContext from './context/DataContext';\nimport api from './api/posts';\nimport PetMedicalRecord from \"./PetMedicalRecord\";\n\nconst PetMedical = () => {\n    const [medicalRecord, setMedicalRecord] = useState();\n    const { pets, userID, auth } = useContext(DataContext);\n    const { id } = useParams(); // id is used in Route\n    const pet = pets.find(pet => (pet.id).toString() === id); // === is for string match, == for numeric\n\n    useEffect(() => {\n    const fetchMedical = async () => {\n        try {\n            // in axios, it automatically returns response in json format and catch the error, accesible through response.data\n            const response = await api.get(`${userID}/pets/${pet.id}/medical/all`, {\n                headers: {\n                    'x-access-token': auth.accessToken\n                }\n            });\n            setMedicalRecord(response.data); // response.data is in json format\n\n        } catch (err) {\n            if (err.response) { // Not in the 200 response range\n                console.log(err.response.data);\n                console.log(err.response.status);\n                console.log(err.response.headers);\n            } else { console.log(`Error: ${err.message}`) }\n        }\n    }\n    fetchMedical();\n    }, [pet.id, auth, userID])\n\n    return (\n        <div className=\"container\">\n            {medicalRecord ? medicalRecord.map(record => (\n                <PetMedicalRecord record={record} key={record.id} />\n            )) : \"missing record\"}\n        </div>\n    )\n\n    \n}\n\nexport default PetMedical\n"]},"metadata":{},"sourceType":"module"}